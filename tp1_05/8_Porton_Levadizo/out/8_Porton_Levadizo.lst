
examples/c/sapi/statecharts/8_Porton_Levadizo/out/8_Porton_Levadizo.elf:     file format elf32-littlearm
examples/c/sapi/statecharts/8_Porton_Levadizo/out/8_Porton_Levadizo.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000981

Program Header:
0x70000001 off    0x000120b0 vaddr 0x1a0020b0 paddr 0x1a0020b0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x0000007c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000020b8 memsz 0x000020b8 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0020b8 align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a0020b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          0000007c  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .init_array   00000004  1a000300  1a000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .text         00001dac  1a000304  1a000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .ARM.exidx    00000008  1a0020b0  1a0020b0  000120b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 17 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 18 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 19 .noinit       00000000  100000c4  100000c4  00000000  2**2
                  ALLOC
 20 .debug_info   00014e6f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 00003777  00000000  00000000  00034eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00005694  00000000  00000000  0003862e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00000b40  00000000  00000000  0003dcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 000008f1  00000000  00000000  0003e808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  0000c31c  00000000  00000000  0003f0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   0000ec15  00000000  00000000  0004b415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    0002a2b1  00000000  00000000  0005a02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      0000001e  00000000  00000000  000842db  2**0
                  CONTENTS, READONLY
 29 .ARM.attributes 00000032  00000000  00000000  000842f9  2**0
                  CONTENTS, READONLY
 30 .debug_frame  00001a8c  00000000  00000000  0008432c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 0000004e  00000000  00000000  00085db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a000300 l    d  .init_array	00000000 .init_array
1a000304 l    d  .text	00000000 .text
1a0020b0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000c4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
100000a8 l     O .bss	00000004 callBackFuncParams
100000b0 l     O .bss	00000008 tickCounter
100000b8 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 PortonLevadizo.c
1a000304 l     F .text	0000001a clearInEvents
1a00031e l     F .text	0000000a enact_TECX_OPRIMIDO
1a000328 l     F .text	0000000a enseq_TECX_NO_OPRIMIDO_default
1a000332 l     F .text	00000012 enseq_TECX_OPRIMIDO_default
1a000344 l     F .text	0000000a enseq_TECX_VALIDACION_default
1a00034e l     F .text	00000008 exseq_TECX_NO_OPRIMIDO
1a000356 l     F .text	00000008 exseq_TECX_OPRIMIDO
1a00035e l     F .text	00000008 exseq_TECX_VALIDACION
1a000366 l     F .text	0000000a exseq_S_CERRADO
1a000370 l     F .text	0000000a exseq_S_ABIERTO
1a00037a l     F .text	00000008 react_TECX__entry_Default
1a000382 l     F .text	00000008 enseq_TECX_default
1a00038a l     F .text	00000004 react
1a00038e l     F .text	00000026 TECX_OPRIMIDO_react
1a0003b4 l     F .text	00000038 TECX_VALIDACION_react
1a0003ec l     F .text	00000022 enact_S_CERRADO
1a00040e l     F .text	00000012 enseq_S_CERRADO_default
1a000420 l     F .text	00000008 react_S__entry_Default
1a000428 l     F .text	00000008 enseq_S_default
1a000430 l     F .text	00000022 enact_S_ABIERTO
1a000452 l     F .text	00000012 enseq_S_ABIERTO_default
1a000464 l     F .text	0000000c exact_TECX_DEBOUNCE
1a000470 l     F .text	0000000e exseq_TECX_DEBOUNCE
1a00047e l     F .text	00000026 TECX_DEBOUNCE_react
1a0004a4 l     F .text	0000000c exact_S_CERRANDO
1a0004b0 l     F .text	00000010 exseq_S_CERRANDO
1a0004c0 l     F .text	0000000c exact_S_ABRIENDO
1a0004cc l     F .text	00000010 exseq_S_ABRIENDO
1a0004dc l     F .text	0000001e S_ABRIENDO_react
1a0004fa l     F .text	00000010 enact_TECX_DEBOUNCE
1a00050a l     F .text	00000012 enseq_TECX_DEBOUNCE_default
1a00051c l     F .text	00000026 TECX_NO_OPRIMIDO_react
1a000542 l     F .text	0000001e enact_S_ABRIENDO
1a000560 l     F .text	00000012 enseq_S_ABRIENDO_default
1a000572 l     F .text	00000028 S_CERRADO_react
1a00059a l     F .text	00000036 S_CERRANDO_react
1a0005d0 l     F .text	0000001e enact_S_CERRANDO
1a0005ee l     F .text	00000012 enseq_S_CERRANDO_default
1a000600 l     F .text	00000028 S_ABIERTO_react
00000000 l    df *ABS*	00000000 main.c
1000004c l     O .bss	00000020 statechart
00000000 l    df *ABS*	00000000 TimerTicks.c
00000000 l    df *ABS*	00000000 board.c
1a000a0c l     F .text	00000048 Board_LED_Init
1a000a54 l     F .text	00000044 Board_TEC_Init
1a000a98 l     F .text	00000044 Board_GPIO_Init
1a000adc l     F .text	00000030 Board_ADC_Init
1a000b0c l     F .text	00000038 Board_SPI_Init
1a000b44 l     F .text	00000024 Board_I2C_Init
1a001e58 l     O .text	00000008 GpioButtons
1a001e60 l     O .text	0000000c GpioLeds
1a001e6c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001e84 l     O .text	00000004 InitClkStates
1a001e88 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000c68 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000c7c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000d44 l     F .text	000000a8 pll_calc_divs
1a000dec l     F .text	00000110 pll_get_frac
1a000efc l     F .text	00000054 Chip_Clock_FindBaseClock
1a001174 l     F .text	00000022 Chip_Clock_GetDivRate
100000a0 l     O .bss	00000008 audio_usb_pll_freq
1a001f04 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00136c l     F .text	00000014 Chip_SSP_GetClockIndex
1a001380 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001f70 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a00157c l     F .text	0000002c Chip_UART_GetIndex
1a001fb8 l     O .text	00000008 UART_BClock
1a001fc0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00172c l     F .text	00000038 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100000bc l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a000304 l       .init_array	00000000 __init_array_end
1a000300 l       .bss_RAM5	00000000 __preinit_array_end
1a000300 l       .init_array	00000000 __init_array_start
1a000300 l       .bss_RAM5	00000000 __preinit_array_start
1a000f9c g     F .text	0000001c Chip_Clock_GetDividerSource
10000048 g     O .bss	00000001 SysTick_Time_Flag
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000bbc g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000d22 g     F .text	0000000c Chip_ADC_SetResolution
1a001a90 g     F .text	0000002c SysTick_Handler
1a00097c  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a0020b8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff6f0e g       *ABS*	00000000 __valid_user_code_checksum
1a0020b8 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a000938 g     F .text	00000044 UpdateTimers
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a00121c g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0008e4 g     F .text	0000002a IsPendEvent
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00090e g     F .text	0000002a MarkAsAttEvent
1a001b4c g     F .text	00000000 .hidden __aeabi_uldivmod
100000c4 g       .noinit	00000000 _noinit
1000009c g     O .bss	00000004 SystemCoreClock
1a0015a8 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a001298 g     F .text	0000004c Chip_Clock_GetRate
1a000714 g     F .text	0000000c myTickHook
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000bf0 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001b7c g     F .text	0000027a .hidden __udivmoddi4
1a001e54 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000706 g     F .text	00000006 portonLevadizoIface_raise_evTECXNoOprimido
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0020b0 g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001dfc g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000b8c g     F .text	00000030 Board_Init
1a000a0a  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100000c4 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000980 g     F .text	00000088 Reset_Handler
1a001a1c g     F .text	00000074 tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001330 g     F .text	0000003c Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000f50 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a001308 g     F .text	00000028 Chip_I2C_Init
1a000860 g     F .text	00000040 SetNewTimerTick
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a00110c g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a000658 g     F .text	0000009a portonLevadizo_runCycle
1a001fc8 g     O .text	000000e6 gpioPinsInit
1a001398 g     F .text	00000012 Chip_SSP_SetClockRate
1a000730 g     F .text	0000001c portonLevadizo_setTimer
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0011f4 g     F .text	00000028 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a000cf0 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0013aa g     F .text	00000042 Chip_SSP_SetBitRate
1a000720 g     F .text	00000010 portonLevadizoIface_opLED
1a0012e4 g     F .text	00000002 Chip_GPIO_Init
1a001e80 g     O .text	00000004 OscRateIn
100000c4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001764 g     F .text	000001ac gpioInit
1a001df8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001abc g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000fb8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001e44 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a00078c g     F .text	000000a4 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0008a0 g     F .text	00000044 UnsetTimerTick
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001228 g     F .text	0000003c Chip_Clock_EnableOpts
1a00074c g     F .text	00000014 portonLevadizo_unsetTimer
1a000fd4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00108c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0016d8 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001910 g     F .text	0000006a gpioWrite
1a000a08  w    F .text	00000002 _fini
1a000628 g     F .text	00000020 portonLevadizo_init
1a000cb0 g     F .text	00000040 Chip_ADC_Init
100000c0 g     O .bss	00000004 g_pUsbApi
1a000bc4 g     F .text	0000002c Board_SetupMuxing
1a000760 g     F .text	0000002a Buttons_GetStatus_
1a0015fc g     F .text	000000dc Chip_UART_SetBaudFDR
10000040 g     O .data	00000008 tickRateMS
1a000648 g     F .text	00000010 portonLevadizo_enter
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1000006c g     O .bss	00000030 ticks
1b000000 g       .text	00000000 __core_m0app_START__
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a000830 g     F .text	00000030 InitTimerTicks
10000000 g       .data	00000000 _data
1a0019e4 g     F .text	00000020 tickCallbackSet
100000c4 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0013ec g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000b68 g     F .text	00000024 Board_Debug_Init
10000048 g       .data	00000000 _edata
1a0012e8 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001424 g     F .text	00000158 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000d30 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00070c g     F .text	00000008 portonLevadizoIface_raise_evTECXOprimido
1a001df8  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001264 g     F .text	00000034 Chip_Clock_Enable
1a0006f4 g     F .text	00000012 portonLevadizo_raiseTimeEvent
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00197a g     F .text	00000068 gpioRead
1a001ad8 g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001a04 g     F .text	00000016 tickPowerSet
1a001198 g     F .text	0000005c Chip_Clock_SetBaseClock
1a001710 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000c5c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 81 09 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 0e 6f ff 53     }............o.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	91 1a 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	bd 1a 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0020b8 	.word	0x1a0020b8
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000048 	.word	0x00000048
1a000120:	1a0020b8 	.word	0x1a0020b8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0020b8 	.word	0x1a0020b8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0020b8 	.word	0x1a0020b8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0020b8 	.word	0x1a0020b8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	0000007c 	.word	0x0000007c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:

}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

Disassembly of section .text:

1a000304 <clearInEvents>:
	return result;
}

static void clearInEvents(PortonLevadizo* handle)
{
	handle->iface.evTECXNoOprimido_raised = bool_false;
1a000304:	2300      	movs	r3, #0
1a000306:	7203      	strb	r3, [r0, #8]
	handle->iface.evTECXOprimido_raised = bool_false;
1a000308:	7243      	strb	r3, [r0, #9]
	handle->internal.siTECXOK_raised = bool_false;
1a00030a:	7403      	strb	r3, [r0, #16]
	handle->internal.siFinCarreraIni_raised = bool_false;
1a00030c:	7443      	strb	r3, [r0, #17]
	handle->internal.siFinCarreraFin_raised = bool_false;
1a00030e:	7483      	strb	r3, [r0, #18]
	handle->internal.siMotorUp_raised = bool_false;
1a000310:	74c3      	strb	r3, [r0, #19]
	handle->internal.siMotorDown_raised = bool_false;
1a000312:	7503      	strb	r3, [r0, #20]
	handle->internal.siMotorOff_raised = bool_false;
1a000314:	7543      	strb	r3, [r0, #21]
	handle->timeEvents.portonLevadizo_TECX_DEBOUNCE_tev0_raised = bool_false;
1a000316:	7703      	strb	r3, [r0, #28]
	handle->timeEvents.portonLevadizo_S_CERRANDO_tev0_raised = bool_false;
1a000318:	7743      	strb	r3, [r0, #29]
	handle->timeEvents.portonLevadizo_S_ABRIENDO_tev0_raised = bool_false;
1a00031a:	7783      	strb	r3, [r0, #30]
}
1a00031c:	4770      	bx	lr

1a00031e <enact_TECX_OPRIMIDO>:

/* Entry action for state 'OPRIMIDO'. */
static void enact_TECX_OPRIMIDO(PortonLevadizo* handle)
{
	/* Entry action for state 'OPRIMIDO'. */
	handle->internal.siTECXOK_raised = bool_true;
1a00031e:	2301      	movs	r3, #1
1a000320:	7403      	strb	r3, [r0, #16]
	handle->internal.viTecla = handle->iface.evTECXOprimido_value;
1a000322:	68c3      	ldr	r3, [r0, #12]
1a000324:	6183      	str	r3, [r0, #24]
}
1a000326:	4770      	bx	lr

1a000328 <enseq_TECX_NO_OPRIMIDO_default>:

/* 'default' enter sequence for state NO_OPRIMIDO */
static void enseq_TECX_NO_OPRIMIDO_default(PortonLevadizo* handle)
{
	/* 'default' enter sequence for state NO_OPRIMIDO */
	handle->stateConfVector[0] = PortonLevadizo_TECX_NO_OPRIMIDO;
1a000328:	2302      	movs	r3, #2
1a00032a:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00032c:	2300      	movs	r3, #0
1a00032e:	6043      	str	r3, [r0, #4]
}
1a000330:	4770      	bx	lr

1a000332 <enseq_TECX_OPRIMIDO_default>:

/* 'default' enter sequence for state OPRIMIDO */
static void enseq_TECX_OPRIMIDO_default(PortonLevadizo* handle)
{
1a000332:	b510      	push	{r4, lr}
1a000334:	4604      	mov	r4, r0
	/* 'default' enter sequence for state OPRIMIDO */
	enact_TECX_OPRIMIDO(handle);
1a000336:	f7ff fff2 	bl	1a00031e <enact_TECX_OPRIMIDO>
	handle->stateConfVector[0] = PortonLevadizo_TECX_OPRIMIDO;
1a00033a:	2303      	movs	r3, #3
1a00033c:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a00033e:	2300      	movs	r3, #0
1a000340:	6063      	str	r3, [r4, #4]
}
1a000342:	bd10      	pop	{r4, pc}

1a000344 <enseq_TECX_VALIDACION_default>:

/* 'default' enter sequence for state VALIDACION */
static void enseq_TECX_VALIDACION_default(PortonLevadizo* handle)
{
	/* 'default' enter sequence for state VALIDACION */
	handle->stateConfVector[0] = PortonLevadizo_TECX_VALIDACION;
1a000344:	2304      	movs	r3, #4
1a000346:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000348:	2300      	movs	r3, #0
1a00034a:	6043      	str	r3, [r0, #4]
}
1a00034c:	4770      	bx	lr

1a00034e <exseq_TECX_NO_OPRIMIDO>:

/* Default exit sequence for state NO_OPRIMIDO */
static void exseq_TECX_NO_OPRIMIDO(PortonLevadizo* handle)
{
	/* Default exit sequence for state NO_OPRIMIDO */
	handle->stateConfVector[0] = PortonLevadizo_last_state;
1a00034e:	2300      	movs	r3, #0
1a000350:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000352:	6043      	str	r3, [r0, #4]
}
1a000354:	4770      	bx	lr

1a000356 <exseq_TECX_OPRIMIDO>:

/* Default exit sequence for state OPRIMIDO */
static void exseq_TECX_OPRIMIDO(PortonLevadizo* handle)
{
	/* Default exit sequence for state OPRIMIDO */
	handle->stateConfVector[0] = PortonLevadizo_last_state;
1a000356:	2300      	movs	r3, #0
1a000358:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00035a:	6043      	str	r3, [r0, #4]
}
1a00035c:	4770      	bx	lr

1a00035e <exseq_TECX_VALIDACION>:

/* Default exit sequence for state VALIDACION */
static void exseq_TECX_VALIDACION(PortonLevadizo* handle)
{
	/* Default exit sequence for state VALIDACION */
	handle->stateConfVector[0] = PortonLevadizo_last_state;
1a00035e:	2300      	movs	r3, #0
1a000360:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000362:	6043      	str	r3, [r0, #4]
}
1a000364:	4770      	bx	lr

1a000366 <exseq_S_CERRADO>:

/* Default exit sequence for state CERRADO */
static void exseq_S_CERRADO(PortonLevadizo* handle)
{
	/* Default exit sequence for state CERRADO */
	handle->stateConfVector[1] = PortonLevadizo_last_state;
1a000366:	2300      	movs	r3, #0
1a000368:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a00036a:	2301      	movs	r3, #1
1a00036c:	6043      	str	r3, [r0, #4]
}
1a00036e:	4770      	bx	lr

1a000370 <exseq_S_ABIERTO>:

/* Default exit sequence for state ABIERTO */
static void exseq_S_ABIERTO(PortonLevadizo* handle)
{
	/* Default exit sequence for state ABIERTO */
	handle->stateConfVector[1] = PortonLevadizo_last_state;
1a000370:	2300      	movs	r3, #0
1a000372:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000374:	2301      	movs	r3, #1
1a000376:	6043      	str	r3, [r0, #4]
}
1a000378:	4770      	bx	lr

1a00037a <react_TECX__entry_Default>:
	}
}

/* Default react sequence for initial entry  */
static void react_TECX__entry_Default(PortonLevadizo* handle)
{
1a00037a:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_TECX_NO_OPRIMIDO_default(handle);
1a00037c:	f7ff ffd4 	bl	1a000328 <enseq_TECX_NO_OPRIMIDO_default>
}
1a000380:	bd08      	pop	{r3, pc}

1a000382 <enseq_TECX_default>:
{
1a000382:	b508      	push	{r3, lr}
	react_TECX__entry_Default(handle);
1a000384:	f7ff fff9 	bl	1a00037a <react_TECX__entry_Default>
}
1a000388:	bd08      	pop	{r3, pc}

1a00038a <react>:
}

static sc_boolean react(PortonLevadizo* handle) {
	/* State machine reactions. */
	return bool_false;
}
1a00038a:	2000      	movs	r0, #0
1a00038c:	4770      	bx	lr

1a00038e <TECX_OPRIMIDO_react>:
		} 
	} 
	return did_transition;
}

static sc_boolean TECX_OPRIMIDO_react(PortonLevadizo* handle, const sc_boolean try_transition) {
1a00038e:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state OPRIMIDO. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a000390:	460d      	mov	r5, r1
1a000392:	b131      	cbz	r1, 1a0003a2 <TECX_OPRIMIDO_react+0x14>
1a000394:	4604      	mov	r4, r0
	{ 
		if ((react(handle)) == (bool_false))
1a000396:	f7ff fff8 	bl	1a00038a <react>
1a00039a:	b910      	cbnz	r0, 1a0003a2 <TECX_OPRIMIDO_react+0x14>
		{ 
			if (handle->iface.evTECXNoOprimido_raised == bool_true)
1a00039c:	7a23      	ldrb	r3, [r4, #8]
1a00039e:	b913      	cbnz	r3, 1a0003a6 <TECX_OPRIMIDO_react+0x18>
			{ 
				exseq_TECX_OPRIMIDO(handle);
				enseq_TECX_NO_OPRIMIDO_default(handle);
			}  else
			{
				did_transition = bool_false;
1a0003a0:	461d      	mov	r5, r3
			}
		} 
	} 
	return did_transition;
}
1a0003a2:	4628      	mov	r0, r5
1a0003a4:	bd38      	pop	{r3, r4, r5, pc}
				exseq_TECX_OPRIMIDO(handle);
1a0003a6:	4620      	mov	r0, r4
1a0003a8:	f7ff ffd5 	bl	1a000356 <exseq_TECX_OPRIMIDO>
				enseq_TECX_NO_OPRIMIDO_default(handle);
1a0003ac:	4620      	mov	r0, r4
1a0003ae:	f7ff ffbb 	bl	1a000328 <enseq_TECX_NO_OPRIMIDO_default>
1a0003b2:	e7f6      	b.n	1a0003a2 <TECX_OPRIMIDO_react+0x14>

1a0003b4 <TECX_VALIDACION_react>:

static sc_boolean TECX_VALIDACION_react(PortonLevadizo* handle, const sc_boolean try_transition) {
1a0003b4:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state VALIDACION. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a0003b6:	460d      	mov	r5, r1
1a0003b8:	b141      	cbz	r1, 1a0003cc <TECX_VALIDACION_react+0x18>
1a0003ba:	4604      	mov	r4, r0
	{ 
		if ((react(handle)) == (bool_false))
1a0003bc:	f7ff ffe5 	bl	1a00038a <react>
1a0003c0:	b920      	cbnz	r0, 1a0003cc <TECX_VALIDACION_react+0x18>
		{ 
			if (handle->iface.evTECXOprimido_raised == bool_true)
1a0003c2:	7a63      	ldrb	r3, [r4, #9]
1a0003c4:	b923      	cbnz	r3, 1a0003d0 <TECX_VALIDACION_react+0x1c>
			{ 
				exseq_TECX_VALIDACION(handle);
				enseq_TECX_OPRIMIDO_default(handle);
			}  else
			{
				if (handle->iface.evTECXNoOprimido_raised == bool_true)
1a0003c6:	7a23      	ldrb	r3, [r4, #8]
1a0003c8:	b94b      	cbnz	r3, 1a0003de <TECX_VALIDACION_react+0x2a>
				{ 
					exseq_TECX_VALIDACION(handle);
					enseq_TECX_NO_OPRIMIDO_default(handle);
				}  else
				{
					did_transition = bool_false;
1a0003ca:	461d      	mov	r5, r3
				}
			}
		} 
	} 
	return did_transition;
}
1a0003cc:	4628      	mov	r0, r5
1a0003ce:	bd38      	pop	{r3, r4, r5, pc}
				exseq_TECX_VALIDACION(handle);
1a0003d0:	4620      	mov	r0, r4
1a0003d2:	f7ff ffc4 	bl	1a00035e <exseq_TECX_VALIDACION>
				enseq_TECX_OPRIMIDO_default(handle);
1a0003d6:	4620      	mov	r0, r4
1a0003d8:	f7ff ffab 	bl	1a000332 <enseq_TECX_OPRIMIDO_default>
1a0003dc:	e7f6      	b.n	1a0003cc <TECX_VALIDACION_react+0x18>
					exseq_TECX_VALIDACION(handle);
1a0003de:	4620      	mov	r0, r4
1a0003e0:	f7ff ffbd 	bl	1a00035e <exseq_TECX_VALIDACION>
					enseq_TECX_NO_OPRIMIDO_default(handle);
1a0003e4:	4620      	mov	r0, r4
1a0003e6:	f7ff ff9f 	bl	1a000328 <enseq_TECX_NO_OPRIMIDO_default>
1a0003ea:	e7ef      	b.n	1a0003cc <TECX_VALIDACION_react+0x18>

1a0003ec <enact_S_CERRADO>:
{
1a0003ec:	b510      	push	{r4, lr}
1a0003ee:	4604      	mov	r4, r0
	portonLevadizoIface_opLED(handle, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED3, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED_OFF);
1a0003f0:	2200      	movs	r2, #0
1a0003f2:	2105      	movs	r1, #5
1a0003f4:	f000 f994 	bl	1a000720 <portonLevadizoIface_opLED>
	portonLevadizoIface_opLED(handle, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LEDG, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED_OFF);
1a0003f8:	2200      	movs	r2, #0
1a0003fa:	2101      	movs	r1, #1
1a0003fc:	4620      	mov	r0, r4
1a0003fe:	f000 f98f 	bl	1a000720 <portonLevadizoIface_opLED>
	portonLevadizoIface_opLED(handle, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LEDR, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED_ON);
1a000402:	2201      	movs	r2, #1
1a000404:	2100      	movs	r1, #0
1a000406:	4620      	mov	r0, r4
1a000408:	f000 f98a 	bl	1a000720 <portonLevadizoIface_opLED>
}
1a00040c:	bd10      	pop	{r4, pc}

1a00040e <enseq_S_CERRADO_default>:
{
1a00040e:	b510      	push	{r4, lr}
1a000410:	4604      	mov	r4, r0
	enact_S_CERRADO(handle);
1a000412:	f7ff ffeb 	bl	1a0003ec <enact_S_CERRADO>
	handle->stateConfVector[1] = PortonLevadizo_S_CERRADO;
1a000416:	2305      	movs	r3, #5
1a000418:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a00041a:	2301      	movs	r3, #1
1a00041c:	6063      	str	r3, [r4, #4]
}
1a00041e:	bd10      	pop	{r4, pc}

1a000420 <react_S__entry_Default>:
{
1a000420:	b508      	push	{r3, lr}
	enseq_S_CERRADO_default(handle);
1a000422:	f7ff fff4 	bl	1a00040e <enseq_S_CERRADO_default>
}
1a000426:	bd08      	pop	{r3, pc}

1a000428 <enseq_S_default>:
{
1a000428:	b508      	push	{r3, lr}
	react_S__entry_Default(handle);
1a00042a:	f7ff fff9 	bl	1a000420 <react_S__entry_Default>
}
1a00042e:	bd08      	pop	{r3, pc}

1a000430 <enact_S_ABIERTO>:
{
1a000430:	b510      	push	{r4, lr}
1a000432:	4604      	mov	r4, r0
	portonLevadizoIface_opLED(handle, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED3, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED_OFF);
1a000434:	2200      	movs	r2, #0
1a000436:	2105      	movs	r1, #5
1a000438:	f000 f972 	bl	1a000720 <portonLevadizoIface_opLED>
	portonLevadizoIface_opLED(handle, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LEDR, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED_OFF);
1a00043c:	2200      	movs	r2, #0
1a00043e:	4611      	mov	r1, r2
1a000440:	4620      	mov	r0, r4
1a000442:	f000 f96d 	bl	1a000720 <portonLevadizoIface_opLED>
	portonLevadizoIface_opLED(handle, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LEDG, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED_ON);
1a000446:	2201      	movs	r2, #1
1a000448:	4611      	mov	r1, r2
1a00044a:	4620      	mov	r0, r4
1a00044c:	f000 f968 	bl	1a000720 <portonLevadizoIface_opLED>
}
1a000450:	bd10      	pop	{r4, pc}

1a000452 <enseq_S_ABIERTO_default>:
{
1a000452:	b510      	push	{r4, lr}
1a000454:	4604      	mov	r4, r0
	enact_S_ABIERTO(handle);
1a000456:	f7ff ffeb 	bl	1a000430 <enact_S_ABIERTO>
	handle->stateConfVector[1] = PortonLevadizo_S_ABIERTO;
1a00045a:	2308      	movs	r3, #8
1a00045c:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a00045e:	2301      	movs	r3, #1
1a000460:	6063      	str	r3, [r4, #4]
}
1a000462:	bd10      	pop	{r4, pc}

1a000464 <exact_TECX_DEBOUNCE>:
{
1a000464:	b508      	push	{r3, lr}
	portonLevadizo_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.portonLevadizo_TECX_DEBOUNCE_tev0_raised) );		
1a000466:	f100 011c 	add.w	r1, r0, #28
1a00046a:	f000 f96f 	bl	1a00074c <portonLevadizo_unsetTimer>
}
1a00046e:	bd08      	pop	{r3, pc}

1a000470 <exseq_TECX_DEBOUNCE>:
{
1a000470:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = PortonLevadizo_last_state;
1a000472:	2200      	movs	r2, #0
1a000474:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000476:	6042      	str	r2, [r0, #4]
	exact_TECX_DEBOUNCE(handle);
1a000478:	f7ff fff4 	bl	1a000464 <exact_TECX_DEBOUNCE>
}
1a00047c:	bd08      	pop	{r3, pc}

1a00047e <TECX_DEBOUNCE_react>:
static sc_boolean TECX_DEBOUNCE_react(PortonLevadizo* handle, const sc_boolean try_transition) {
1a00047e:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a000480:	460d      	mov	r5, r1
1a000482:	b131      	cbz	r1, 1a000492 <TECX_DEBOUNCE_react+0x14>
1a000484:	4604      	mov	r4, r0
		if ((react(handle)) == (bool_false))
1a000486:	f7ff ff80 	bl	1a00038a <react>
1a00048a:	b910      	cbnz	r0, 1a000492 <TECX_DEBOUNCE_react+0x14>
			if (handle->timeEvents.portonLevadizo_TECX_DEBOUNCE_tev0_raised == bool_true)
1a00048c:	7f23      	ldrb	r3, [r4, #28]
1a00048e:	b913      	cbnz	r3, 1a000496 <TECX_DEBOUNCE_react+0x18>
				did_transition = bool_false;
1a000490:	461d      	mov	r5, r3
}
1a000492:	4628      	mov	r0, r5
1a000494:	bd38      	pop	{r3, r4, r5, pc}
				exseq_TECX_DEBOUNCE(handle);
1a000496:	4620      	mov	r0, r4
1a000498:	f7ff ffea 	bl	1a000470 <exseq_TECX_DEBOUNCE>
				enseq_TECX_VALIDACION_default(handle);
1a00049c:	4620      	mov	r0, r4
1a00049e:	f7ff ff51 	bl	1a000344 <enseq_TECX_VALIDACION_default>
1a0004a2:	e7f6      	b.n	1a000492 <TECX_DEBOUNCE_react+0x14>

1a0004a4 <exact_S_CERRANDO>:
{
1a0004a4:	b508      	push	{r3, lr}
	portonLevadizo_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.portonLevadizo_S_CERRANDO_tev0_raised) );		
1a0004a6:	f100 011d 	add.w	r1, r0, #29
1a0004aa:	f000 f94f 	bl	1a00074c <portonLevadizo_unsetTimer>
}
1a0004ae:	bd08      	pop	{r3, pc}

1a0004b0 <exseq_S_CERRANDO>:
{
1a0004b0:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = PortonLevadizo_last_state;
1a0004b2:	2200      	movs	r2, #0
1a0004b4:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a0004b6:	2201      	movs	r2, #1
1a0004b8:	6042      	str	r2, [r0, #4]
	exact_S_CERRANDO(handle);
1a0004ba:	f7ff fff3 	bl	1a0004a4 <exact_S_CERRANDO>
}
1a0004be:	bd08      	pop	{r3, pc}

1a0004c0 <exact_S_ABRIENDO>:
{
1a0004c0:	b508      	push	{r3, lr}
	portonLevadizo_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.portonLevadizo_S_ABRIENDO_tev0_raised) );		
1a0004c2:	f100 011e 	add.w	r1, r0, #30
1a0004c6:	f000 f941 	bl	1a00074c <portonLevadizo_unsetTimer>
}
1a0004ca:	bd08      	pop	{r3, pc}

1a0004cc <exseq_S_ABRIENDO>:
{
1a0004cc:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = PortonLevadizo_last_state;
1a0004ce:	2200      	movs	r2, #0
1a0004d0:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a0004d2:	2201      	movs	r2, #1
1a0004d4:	6042      	str	r2, [r0, #4]
	exact_S_ABRIENDO(handle);
1a0004d6:	f7ff fff3 	bl	1a0004c0 <exact_S_ABRIENDO>
}
1a0004da:	bd08      	pop	{r3, pc}

1a0004dc <S_ABRIENDO_react>:
		}
	} 
	return did_transition;
}

static sc_boolean S_ABRIENDO_react(PortonLevadizo* handle, const sc_boolean try_transition) {
1a0004dc:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state ABRIENDO. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a0004de:	460d      	mov	r5, r1
1a0004e0:	b119      	cbz	r1, 1a0004ea <S_ABRIENDO_react+0xe>
1a0004e2:	4604      	mov	r4, r0
	{ 
		if (handle->timeEvents.portonLevadizo_S_ABRIENDO_tev0_raised == bool_true)
1a0004e4:	7f83      	ldrb	r3, [r0, #30]
1a0004e6:	b913      	cbnz	r3, 1a0004ee <S_ABRIENDO_react+0x12>
		{ 
			exseq_S_ABRIENDO(handle);
			enseq_S_ABIERTO_default(handle);
		}  else
		{
			did_transition = bool_false;
1a0004e8:	461d      	mov	r5, r3
		}
	} 
	return did_transition;
}
1a0004ea:	4628      	mov	r0, r5
1a0004ec:	bd38      	pop	{r3, r4, r5, pc}
			exseq_S_ABRIENDO(handle);
1a0004ee:	f7ff ffed 	bl	1a0004cc <exseq_S_ABRIENDO>
			enseq_S_ABIERTO_default(handle);
1a0004f2:	4620      	mov	r0, r4
1a0004f4:	f7ff ffad 	bl	1a000452 <enseq_S_ABIERTO_default>
1a0004f8:	e7f7      	b.n	1a0004ea <S_ABRIENDO_react+0xe>

1a0004fa <enact_TECX_DEBOUNCE>:
{
1a0004fa:	b508      	push	{r3, lr}
	portonLevadizo_setTimer(handle, (sc_eventid) &(handle->timeEvents.portonLevadizo_TECX_DEBOUNCE_tev0_raised) , 100, bool_false);
1a0004fc:	2300      	movs	r3, #0
1a0004fe:	2264      	movs	r2, #100	; 0x64
1a000500:	f100 011c 	add.w	r1, r0, #28
1a000504:	f000 f914 	bl	1a000730 <portonLevadizo_setTimer>
}
1a000508:	bd08      	pop	{r3, pc}

1a00050a <enseq_TECX_DEBOUNCE_default>:
{
1a00050a:	b510      	push	{r4, lr}
1a00050c:	4604      	mov	r4, r0
	enact_TECX_DEBOUNCE(handle);
1a00050e:	f7ff fff4 	bl	1a0004fa <enact_TECX_DEBOUNCE>
	handle->stateConfVector[0] = PortonLevadizo_TECX_DEBOUNCE;
1a000512:	2301      	movs	r3, #1
1a000514:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000516:	2300      	movs	r3, #0
1a000518:	6063      	str	r3, [r4, #4]
}
1a00051a:	bd10      	pop	{r4, pc}

1a00051c <TECX_NO_OPRIMIDO_react>:
static sc_boolean TECX_NO_OPRIMIDO_react(PortonLevadizo* handle, const sc_boolean try_transition) {
1a00051c:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a00051e:	460d      	mov	r5, r1
1a000520:	b131      	cbz	r1, 1a000530 <TECX_NO_OPRIMIDO_react+0x14>
1a000522:	4604      	mov	r4, r0
		if ((react(handle)) == (bool_false))
1a000524:	f7ff ff31 	bl	1a00038a <react>
1a000528:	b910      	cbnz	r0, 1a000530 <TECX_NO_OPRIMIDO_react+0x14>
			if (handle->iface.evTECXOprimido_raised == bool_true)
1a00052a:	7a63      	ldrb	r3, [r4, #9]
1a00052c:	b913      	cbnz	r3, 1a000534 <TECX_NO_OPRIMIDO_react+0x18>
				did_transition = bool_false;
1a00052e:	461d      	mov	r5, r3
}
1a000530:	4628      	mov	r0, r5
1a000532:	bd38      	pop	{r3, r4, r5, pc}
				exseq_TECX_NO_OPRIMIDO(handle);
1a000534:	4620      	mov	r0, r4
1a000536:	f7ff ff0a 	bl	1a00034e <exseq_TECX_NO_OPRIMIDO>
				enseq_TECX_DEBOUNCE_default(handle);
1a00053a:	4620      	mov	r0, r4
1a00053c:	f7ff ffe5 	bl	1a00050a <enseq_TECX_DEBOUNCE_default>
1a000540:	e7f6      	b.n	1a000530 <TECX_NO_OPRIMIDO_react+0x14>

1a000542 <enact_S_ABRIENDO>:
{
1a000542:	b510      	push	{r4, lr}
1a000544:	4604      	mov	r4, r0
	portonLevadizo_setTimer(handle, (sc_eventid) &(handle->timeEvents.portonLevadizo_S_ABRIENDO_tev0_raised) , 8000, bool_false);
1a000546:	2300      	movs	r3, #0
1a000548:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
1a00054c:	f100 011e 	add.w	r1, r0, #30
1a000550:	f000 f8ee 	bl	1a000730 <portonLevadizo_setTimer>
	portonLevadizoIface_opLED(handle, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED3, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED_ON);
1a000554:	2201      	movs	r2, #1
1a000556:	2105      	movs	r1, #5
1a000558:	4620      	mov	r0, r4
1a00055a:	f000 f8e1 	bl	1a000720 <portonLevadizoIface_opLED>
}
1a00055e:	bd10      	pop	{r4, pc}

1a000560 <enseq_S_ABRIENDO_default>:
{
1a000560:	b510      	push	{r4, lr}
1a000562:	4604      	mov	r4, r0
	enact_S_ABRIENDO(handle);
1a000564:	f7ff ffed 	bl	1a000542 <enact_S_ABRIENDO>
	handle->stateConfVector[1] = PortonLevadizo_S_ABRIENDO;
1a000568:	2307      	movs	r3, #7
1a00056a:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a00056c:	2301      	movs	r3, #1
1a00056e:	6063      	str	r3, [r4, #4]
}
1a000570:	bd10      	pop	{r4, pc}

1a000572 <S_CERRADO_react>:
static sc_boolean S_CERRADO_react(PortonLevadizo* handle, const sc_boolean try_transition) {
1a000572:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a000574:	460d      	mov	r5, r1
1a000576:	b171      	cbz	r1, 1a000596 <S_CERRADO_react+0x24>
1a000578:	4604      	mov	r4, r0
		if (((handle->internal.siTECXOK_raised) == bool_true) && (((handle->internal.viTecla) == (PORTONLEVADIZO_PORTONLEVADIZOIFACE_TEC2)) == bool_true))
1a00057a:	7c03      	ldrb	r3, [r0, #16]
1a00057c:	b153      	cbz	r3, 1a000594 <S_CERRADO_react+0x22>
1a00057e:	6983      	ldr	r3, [r0, #24]
1a000580:	2b02      	cmp	r3, #2
1a000582:	d001      	beq.n	1a000588 <S_CERRADO_react+0x16>
			did_transition = bool_false;
1a000584:	2500      	movs	r5, #0
1a000586:	e006      	b.n	1a000596 <S_CERRADO_react+0x24>
			exseq_S_CERRADO(handle);
1a000588:	f7ff feed 	bl	1a000366 <exseq_S_CERRADO>
			enseq_S_ABRIENDO_default(handle);
1a00058c:	4620      	mov	r0, r4
1a00058e:	f7ff ffe7 	bl	1a000560 <enseq_S_ABRIENDO_default>
1a000592:	e000      	b.n	1a000596 <S_CERRADO_react+0x24>
			did_transition = bool_false;
1a000594:	461d      	mov	r5, r3
}
1a000596:	4628      	mov	r0, r5
1a000598:	bd38      	pop	{r3, r4, r5, pc}

1a00059a <S_CERRANDO_react>:
static sc_boolean S_CERRANDO_react(PortonLevadizo* handle, const sc_boolean try_transition) {
1a00059a:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a00059c:	460d      	mov	r5, r1
1a00059e:	b141      	cbz	r1, 1a0005b2 <S_CERRANDO_react+0x18>
1a0005a0:	4604      	mov	r4, r0
		if (((handle->internal.siTECXOK_raised) == bool_true) && (((handle->internal.viTecla) == (PORTONLEVADIZO_PORTONLEVADIZOIFACE_TEC3)) == bool_true))
1a0005a2:	7c03      	ldrb	r3, [r0, #16]
1a0005a4:	b113      	cbz	r3, 1a0005ac <S_CERRANDO_react+0x12>
1a0005a6:	6983      	ldr	r3, [r0, #24]
1a0005a8:	2b04      	cmp	r3, #4
1a0005aa:	d004      	beq.n	1a0005b6 <S_CERRANDO_react+0x1c>
			if (handle->timeEvents.portonLevadizo_S_CERRANDO_tev0_raised == bool_true)
1a0005ac:	7f63      	ldrb	r3, [r4, #29]
1a0005ae:	b943      	cbnz	r3, 1a0005c2 <S_CERRANDO_react+0x28>
				did_transition = bool_false;
1a0005b0:	461d      	mov	r5, r3
}
1a0005b2:	4628      	mov	r0, r5
1a0005b4:	bd38      	pop	{r3, r4, r5, pc}
			exseq_S_CERRANDO(handle);
1a0005b6:	f7ff ff7b 	bl	1a0004b0 <exseq_S_CERRANDO>
			enseq_S_ABRIENDO_default(handle);
1a0005ba:	4620      	mov	r0, r4
1a0005bc:	f7ff ffd0 	bl	1a000560 <enseq_S_ABRIENDO_default>
1a0005c0:	e7f7      	b.n	1a0005b2 <S_CERRANDO_react+0x18>
				exseq_S_CERRANDO(handle);
1a0005c2:	4620      	mov	r0, r4
1a0005c4:	f7ff ff74 	bl	1a0004b0 <exseq_S_CERRANDO>
				enseq_S_CERRADO_default(handle);
1a0005c8:	4620      	mov	r0, r4
1a0005ca:	f7ff ff20 	bl	1a00040e <enseq_S_CERRADO_default>
1a0005ce:	e7f0      	b.n	1a0005b2 <S_CERRANDO_react+0x18>

1a0005d0 <enact_S_CERRANDO>:
{
1a0005d0:	b510      	push	{r4, lr}
1a0005d2:	4604      	mov	r4, r0
	portonLevadizo_setTimer(handle, (sc_eventid) &(handle->timeEvents.portonLevadizo_S_CERRANDO_tev0_raised) , 8000, bool_false);
1a0005d4:	2300      	movs	r3, #0
1a0005d6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
1a0005da:	f100 011d 	add.w	r1, r0, #29
1a0005de:	f000 f8a7 	bl	1a000730 <portonLevadizo_setTimer>
	portonLevadizoIface_opLED(handle, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED3, PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED_ON);
1a0005e2:	2201      	movs	r2, #1
1a0005e4:	2105      	movs	r1, #5
1a0005e6:	4620      	mov	r0, r4
1a0005e8:	f000 f89a 	bl	1a000720 <portonLevadizoIface_opLED>
}
1a0005ec:	bd10      	pop	{r4, pc}

1a0005ee <enseq_S_CERRANDO_default>:
{
1a0005ee:	b510      	push	{r4, lr}
1a0005f0:	4604      	mov	r4, r0
	enact_S_CERRANDO(handle);
1a0005f2:	f7ff ffed 	bl	1a0005d0 <enact_S_CERRANDO>
	handle->stateConfVector[1] = PortonLevadizo_S_CERRANDO;
1a0005f6:	2306      	movs	r3, #6
1a0005f8:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a0005fa:	2301      	movs	r3, #1
1a0005fc:	6063      	str	r3, [r4, #4]
}
1a0005fe:	bd10      	pop	{r4, pc}

1a000600 <S_ABIERTO_react>:

static sc_boolean S_ABIERTO_react(PortonLevadizo* handle, const sc_boolean try_transition) {
1a000600:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state ABIERTO. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a000602:	460d      	mov	r5, r1
1a000604:	b171      	cbz	r1, 1a000624 <S_ABIERTO_react+0x24>
1a000606:	4604      	mov	r4, r0
	{ 
		if (((handle->internal.siTECXOK_raised) == bool_true) && (((handle->internal.viTecla) == (PORTONLEVADIZO_PORTONLEVADIZOIFACE_TEC1)) == bool_true))
1a000608:	7c03      	ldrb	r3, [r0, #16]
1a00060a:	b153      	cbz	r3, 1a000622 <S_ABIERTO_react+0x22>
1a00060c:	6983      	ldr	r3, [r0, #24]
1a00060e:	2b01      	cmp	r3, #1
1a000610:	d001      	beq.n	1a000616 <S_ABIERTO_react+0x16>
		{ 
			exseq_S_ABIERTO(handle);
			enseq_S_CERRANDO_default(handle);
		}  else
		{
			did_transition = bool_false;
1a000612:	2500      	movs	r5, #0
1a000614:	e006      	b.n	1a000624 <S_ABIERTO_react+0x24>
			exseq_S_ABIERTO(handle);
1a000616:	f7ff feab 	bl	1a000370 <exseq_S_ABIERTO>
			enseq_S_CERRANDO_default(handle);
1a00061a:	4620      	mov	r0, r4
1a00061c:	f7ff ffe7 	bl	1a0005ee <enseq_S_CERRANDO_default>
1a000620:	e000      	b.n	1a000624 <S_ABIERTO_react+0x24>
			did_transition = bool_false;
1a000622:	461d      	mov	r5, r3
		}
	} 
	return did_transition;
}
1a000624:	4628      	mov	r0, r5
1a000626:	bd38      	pop	{r3, r4, r5, pc}

1a000628 <portonLevadizo_init>:
{
1a000628:	b538      	push	{r3, r4, r5, lr}
1a00062a:	4604      	mov	r4, r0
	for (i = 0; i < PORTONLEVADIZO_MAX_ORTHOGONAL_STATES; ++i)
1a00062c:	2300      	movs	r3, #0
1a00062e:	e002      	b.n	1a000636 <portonLevadizo_init+0xe>
		handle->stateConfVector[i] = PortonLevadizo_last_state;
1a000630:	2200      	movs	r2, #0
1a000632:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < PORTONLEVADIZO_MAX_ORTHOGONAL_STATES; ++i)
1a000634:	3301      	adds	r3, #1
1a000636:	2b01      	cmp	r3, #1
1a000638:	ddfa      	ble.n	1a000630 <portonLevadizo_init+0x8>
	handle->stateConfVectorPosition = 0;
1a00063a:	2500      	movs	r5, #0
1a00063c:	6065      	str	r5, [r4, #4]
	clearInEvents(handle);
1a00063e:	4620      	mov	r0, r4
1a000640:	f7ff fe60 	bl	1a000304 <clearInEvents>
	handle->internal.viTecla = 0;
1a000644:	61a5      	str	r5, [r4, #24]
}
1a000646:	bd38      	pop	{r3, r4, r5, pc}

1a000648 <portonLevadizo_enter>:
{
1a000648:	b510      	push	{r4, lr}
1a00064a:	4604      	mov	r4, r0
	enseq_TECX_default(handle);
1a00064c:	f7ff fe99 	bl	1a000382 <enseq_TECX_default>
	enseq_S_default(handle);
1a000650:	4620      	mov	r0, r4
1a000652:	f7ff fee9 	bl	1a000428 <enseq_S_default>
}
1a000656:	bd10      	pop	{r4, pc}

1a000658 <portonLevadizo_runCycle>:
{
1a000658:	b510      	push	{r4, lr}
1a00065a:	4604      	mov	r4, r0
	for (handle->stateConfVectorPosition = 0;
1a00065c:	2300      	movs	r3, #0
1a00065e:	6043      	str	r3, [r0, #4]
1a000660:	e006      	b.n	1a000670 <portonLevadizo_runCycle+0x18>
			TECX_DEBOUNCE_react(handle, bool_true);
1a000662:	2101      	movs	r1, #1
1a000664:	4620      	mov	r0, r4
1a000666:	f7ff ff0a 	bl	1a00047e <TECX_DEBOUNCE_react>
		handle->stateConfVectorPosition++)
1a00066a:	6863      	ldr	r3, [r4, #4]
1a00066c:	3301      	adds	r3, #1
1a00066e:	6063      	str	r3, [r4, #4]
		handle->stateConfVectorPosition < PORTONLEVADIZO_MAX_ORTHOGONAL_STATES;
1a000670:	6863      	ldr	r3, [r4, #4]
1a000672:	2b01      	cmp	r3, #1
1a000674:	d839      	bhi.n	1a0006ea <portonLevadizo_runCycle+0x92>
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
1a000676:	5ce3      	ldrb	r3, [r4, r3]
1a000678:	3b01      	subs	r3, #1
1a00067a:	2b07      	cmp	r3, #7
1a00067c:	d8f5      	bhi.n	1a00066a <portonLevadizo_runCycle+0x12>
1a00067e:	a201      	add	r2, pc, #4	; (adr r2, 1a000684 <portonLevadizo_runCycle+0x2c>)
1a000680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000684:	1a000663 	.word	0x1a000663
1a000688:	1a0006a5 	.word	0x1a0006a5
1a00068c:	1a0006af 	.word	0x1a0006af
1a000690:	1a0006b9 	.word	0x1a0006b9
1a000694:	1a0006c3 	.word	0x1a0006c3
1a000698:	1a0006cd 	.word	0x1a0006cd
1a00069c:	1a0006d7 	.word	0x1a0006d7
1a0006a0:	1a0006e1 	.word	0x1a0006e1
			TECX_NO_OPRIMIDO_react(handle, bool_true);
1a0006a4:	2101      	movs	r1, #1
1a0006a6:	4620      	mov	r0, r4
1a0006a8:	f7ff ff38 	bl	1a00051c <TECX_NO_OPRIMIDO_react>
			break;
1a0006ac:	e7dd      	b.n	1a00066a <portonLevadizo_runCycle+0x12>
			TECX_OPRIMIDO_react(handle, bool_true);
1a0006ae:	2101      	movs	r1, #1
1a0006b0:	4620      	mov	r0, r4
1a0006b2:	f7ff fe6c 	bl	1a00038e <TECX_OPRIMIDO_react>
			break;
1a0006b6:	e7d8      	b.n	1a00066a <portonLevadizo_runCycle+0x12>
			TECX_VALIDACION_react(handle, bool_true);
1a0006b8:	2101      	movs	r1, #1
1a0006ba:	4620      	mov	r0, r4
1a0006bc:	f7ff fe7a 	bl	1a0003b4 <TECX_VALIDACION_react>
			break;
1a0006c0:	e7d3      	b.n	1a00066a <portonLevadizo_runCycle+0x12>
			S_CERRADO_react(handle, bool_true);
1a0006c2:	2101      	movs	r1, #1
1a0006c4:	4620      	mov	r0, r4
1a0006c6:	f7ff ff54 	bl	1a000572 <S_CERRADO_react>
			break;
1a0006ca:	e7ce      	b.n	1a00066a <portonLevadizo_runCycle+0x12>
			S_CERRANDO_react(handle, bool_true);
1a0006cc:	2101      	movs	r1, #1
1a0006ce:	4620      	mov	r0, r4
1a0006d0:	f7ff ff63 	bl	1a00059a <S_CERRANDO_react>
			break;
1a0006d4:	e7c9      	b.n	1a00066a <portonLevadizo_runCycle+0x12>
			S_ABRIENDO_react(handle, bool_true);
1a0006d6:	2101      	movs	r1, #1
1a0006d8:	4620      	mov	r0, r4
1a0006da:	f7ff feff 	bl	1a0004dc <S_ABRIENDO_react>
			break;
1a0006de:	e7c4      	b.n	1a00066a <portonLevadizo_runCycle+0x12>
			S_ABIERTO_react(handle, bool_true);
1a0006e0:	2101      	movs	r1, #1
1a0006e2:	4620      	mov	r0, r4
1a0006e4:	f7ff ff8c 	bl	1a000600 <S_ABIERTO_react>
			break;
1a0006e8:	e7bf      	b.n	1a00066a <portonLevadizo_runCycle+0x12>
	clearInEvents(handle);
1a0006ea:	4620      	mov	r0, r4
1a0006ec:	f7ff fe0a 	bl	1a000304 <clearInEvents>
}
1a0006f0:	bd10      	pop	{r4, pc}
1a0006f2:	bf00      	nop

1a0006f4 <portonLevadizo_raiseTimeEvent>:
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
1a0006f4:	301c      	adds	r0, #28
1a0006f6:	4288      	cmp	r0, r1
1a0006f8:	dc04      	bgt.n	1a000704 <portonLevadizo_raiseTimeEvent+0x10>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + (unsigned)sizeof(PortonLevadizoTimeEvents))
1a0006fa:	3003      	adds	r0, #3
1a0006fc:	4288      	cmp	r0, r1
1a0006fe:	d901      	bls.n	1a000704 <portonLevadizo_raiseTimeEvent+0x10>
		*(sc_boolean*)evid = bool_true;
1a000700:	2301      	movs	r3, #1
1a000702:	700b      	strb	r3, [r1, #0]
}
1a000704:	4770      	bx	lr

1a000706 <portonLevadizoIface_raise_evTECXNoOprimido>:
	handle->iface.evTECXNoOprimido_raised = bool_true;
1a000706:	2301      	movs	r3, #1
1a000708:	7203      	strb	r3, [r0, #8]
}
1a00070a:	4770      	bx	lr

1a00070c <portonLevadizoIface_raise_evTECXOprimido>:
	handle->iface.evTECXOprimido_value = value;
1a00070c:	60c1      	str	r1, [r0, #12]
	handle->iface.evTECXOprimido_raised = bool_true;
1a00070e:	2301      	movs	r3, #1
1a000710:	7243      	strb	r3, [r0, #9]
}
1a000712:	4770      	bx	lr

1a000714 <myTickHook>:
 * @return	Nothing
 */
void myTickHook( void *ptr ){

	/* The sysTick Interrupt Handler only set a Flag */
	SysTick_Time_Flag = true;
1a000714:	4b01      	ldr	r3, [pc, #4]	; (1a00071c <myTickHook+0x8>)
1a000716:	2201      	movs	r2, #1
1a000718:	701a      	strb	r2, [r3, #0]
}
1a00071a:	4770      	bx	lr
1a00071c:	10000048 	.word	0x10000048

1a000720 <portonLevadizoIface_opLED>:
{
1a000720:	b508      	push	{r3, lr}
	gpioWrite( (LEDR + LEDNumber), State );
1a000722:	f101 0028 	add.w	r0, r1, #40	; 0x28
1a000726:	4611      	mov	r1, r2
1a000728:	b240      	sxtb	r0, r0
1a00072a:	f001 f8f1 	bl	1a001910 <gpioWrite>
}
1a00072e:	bd08      	pop	{r3, pc}

1a000730 <portonLevadizo_setTimer>:
{
1a000730:	b500      	push	{lr}
1a000732:	b083      	sub	sp, #12
	SetNewTimerTick(ticks, NOF_TIMERS, evid, time_ms, periodic);
1a000734:	9300      	str	r3, [sp, #0]
1a000736:	4613      	mov	r3, r2
1a000738:	460a      	mov	r2, r1
1a00073a:	2103      	movs	r1, #3
1a00073c:	4802      	ldr	r0, [pc, #8]	; (1a000748 <portonLevadizo_setTimer+0x18>)
1a00073e:	f000 f88f 	bl	1a000860 <SetNewTimerTick>
}
1a000742:	b003      	add	sp, #12
1a000744:	f85d fb04 	ldr.w	pc, [sp], #4
1a000748:	1000006c 	.word	0x1000006c

1a00074c <portonLevadizo_unsetTimer>:
{
1a00074c:	b508      	push	{r3, lr}
1a00074e:	460a      	mov	r2, r1
	UnsetTimerTick( ticks, NOF_TIMERS, evid );
1a000750:	2103      	movs	r1, #3
1a000752:	4802      	ldr	r0, [pc, #8]	; (1a00075c <portonLevadizo_unsetTimer+0x10>)
1a000754:	f000 f8a4 	bl	1a0008a0 <UnsetTimerTick>
}
1a000758:	bd08      	pop	{r3, pc}
1a00075a:	bf00      	nop
1a00075c:	1000006c 	.word	0x1000006c

1a000760 <Buttons_GetStatus_>:

/*! This function scan all EDU-CIAA-NXP buttons (TEC1, TEC2, TEC3 and TEC4),
 *  and return ID of pressed button (TEC1 or TEC2 or TEC3 or TEC4)
 *  or false if no button was pressed.
 */
uint32_t Buttons_GetStatus_(void) {
1a000760:	b538      	push	{r3, r4, r5, lr}
	uint8_t ret = false;
	uint32_t idx;

	for (idx = 0; idx < 4; ++idx) {
1a000762:	2400      	movs	r4, #0
	uint8_t ret = false;
1a000764:	4625      	mov	r5, r4
	for (idx = 0; idx < 4; ++idx) {
1a000766:	e000      	b.n	1a00076a <Buttons_GetStatus_+0xa>
1a000768:	3401      	adds	r4, #1
1a00076a:	2c03      	cmp	r4, #3
1a00076c:	d80b      	bhi.n	1a000786 <Buttons_GetStatus_+0x26>
		if (gpioRead( TEC1 + idx ) == 0)
1a00076e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000772:	b240      	sxtb	r0, r0
1a000774:	f001 f901 	bl	1a00197a <gpioRead>
1a000778:	2800      	cmp	r0, #0
1a00077a:	d1f5      	bne.n	1a000768 <Buttons_GetStatus_+0x8>
			ret |= 1 << idx;
1a00077c:	2301      	movs	r3, #1
1a00077e:	40a3      	lsls	r3, r4
1a000780:	431d      	orrs	r5, r3
1a000782:	b2ed      	uxtb	r5, r5
1a000784:	e7f0      	b.n	1a000768 <Buttons_GetStatus_+0x8>
	}
	return ret;
}
1a000786:	4628      	mov	r0, r5
1a000788:	bd38      	pop	{r3, r4, r5, pc}
	...

1a00078c <main>:
/**
 * @brief	main routine for statechart example: EDU-CIAA-NXP - PortonLevadizo
 * @return	Function should not exit.
 */
int main(void)
{
1a00078c:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;

	uint32_t BUTTON_Status;

	/* Generic Initialization */
	boardConfig();
1a00078e:	f001 f9a3 	bl	1a001ad8 <boardInit>

	/* Init Ticks counter => TICKRATE_MS */
	tickConfig( TICKRATE_MS );
1a000792:	2001      	movs	r0, #1
1a000794:	2100      	movs	r1, #0
1a000796:	f001 f941 	bl	1a001a1c <tickInit>

	/* Add Tick Hook */
	tickCallbackSet( myTickHook, (void*)NULL );
1a00079a:	2100      	movs	r1, #0
1a00079c:	4820      	ldr	r0, [pc, #128]	; (1a000820 <main+0x94>)
1a00079e:	f001 f921 	bl	1a0019e4 <tickCallbackSet>

	/* Init Timer Ticks */
	InitTimerTicks( ticks, NOF_TIMERS );
1a0007a2:	2103      	movs	r1, #3
1a0007a4:	481f      	ldr	r0, [pc, #124]	; (1a000824 <main+0x98>)
1a0007a6:	f000 f843 	bl	1a000830 <InitTimerTicks>

	/* Statechart Initialization */
	portonLevadizo_init( &statechart );
1a0007aa:	4c1f      	ldr	r4, [pc, #124]	; (1a000828 <main+0x9c>)
1a0007ac:	4620      	mov	r0, r4
1a0007ae:	f7ff ff3b 	bl	1a000628 <portonLevadizo_init>
	portonLevadizo_enter( &statechart );
1a0007b2:	4620      	mov	r0, r4
1a0007b4:	f7ff ff48 	bl	1a000648 <portonLevadizo_enter>
1a0007b8:	e020      	b.n	1a0007fc <main+0x70>

				/* Then if there are pending events */
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {

					/* Then Raise an Event -> Ticks.evid => OK */
					portonLevadizo_raiseTimeEvent( &statechart, ticks[i].evid );
1a0007ba:	4d1a      	ldr	r5, [pc, #104]	; (1a000824 <main+0x98>)
1a0007bc:	0126      	lsls	r6, r4, #4
1a0007be:	59a9      	ldr	r1, [r5, r6]
1a0007c0:	4819      	ldr	r0, [pc, #100]	; (1a000828 <main+0x9c>)
1a0007c2:	f7ff ff97 	bl	1a0006f4 <portonLevadizo_raiseTimeEvent>

					/* Then Mark as Attached -> Ticks.evid => OK */
					MarkAsAttEvent( ticks, NOF_TIMERS, ticks[i].evid );
1a0007c6:	59aa      	ldr	r2, [r5, r6]
1a0007c8:	2103      	movs	r1, #3
1a0007ca:	4628      	mov	r0, r5
1a0007cc:	f000 f89f 	bl	1a00090e <MarkAsAttEvent>
			for (i = 0; i < NOF_TIMERS; i++) {
1a0007d0:	3401      	adds	r4, #1
1a0007d2:	2c02      	cmp	r4, #2
1a0007d4:	d808      	bhi.n	1a0007e8 <main+0x5c>
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {
1a0007d6:	4813      	ldr	r0, [pc, #76]	; (1a000824 <main+0x98>)
1a0007d8:	0123      	lsls	r3, r4, #4
1a0007da:	58c2      	ldr	r2, [r0, r3]
1a0007dc:	2103      	movs	r1, #3
1a0007de:	f000 f881 	bl	1a0008e4 <IsPendEvent>
1a0007e2:	2800      	cmp	r0, #0
1a0007e4:	d0f4      	beq.n	1a0007d0 <main+0x44>
1a0007e6:	e7e8      	b.n	1a0007ba <main+0x2e>
				}
			}

			/* Then Get status of buttons */
			BUTTON_Status = Buttons_GetStatus_();
1a0007e8:	f7ff ffba 	bl	1a000760 <Buttons_GetStatus_>

			/* Then if there are a pressed button */
			if (BUTTON_Status != 0)
1a0007ec:	4601      	mov	r1, r0
1a0007ee:	b190      	cbz	r0, 1a000816 <main+0x8a>

				/* Then Raise an Event -> evTECXOprimodo => OK,
				 * and Value of pressed button -> viTecla */
				portonLevadizoIface_raise_evTECXOprimido(&statechart, BUTTON_Status);
1a0007f0:	480d      	ldr	r0, [pc, #52]	; (1a000828 <main+0x9c>)
1a0007f2:	f7ff ff8b 	bl	1a00070c <portonLevadizoIface_raise_evTECXOprimido>
			else
				/* Then else Raise an Event -> evTECXNoOprimido => OK */
				portonLevadizoIface_raise_evTECXNoOprimido(&statechart);

			/* Then Run an Cycle of Statechart */
			portonLevadizo_runCycle(&statechart);		// Run Cycle of Statechart
1a0007f6:	480c      	ldr	r0, [pc, #48]	; (1a000828 <main+0x9c>)
1a0007f8:	f7ff ff2e 	bl	1a000658 <portonLevadizo_runCycle>
		__WFI();
1a0007fc:	bf30      	wfi
		if (SysTick_Time_Flag == true) {
1a0007fe:	4b0b      	ldr	r3, [pc, #44]	; (1a00082c <main+0xa0>)
1a000800:	781b      	ldrb	r3, [r3, #0]
1a000802:	2b00      	cmp	r3, #0
1a000804:	d0fa      	beq.n	1a0007fc <main+0x70>
			SysTick_Time_Flag = false;
1a000806:	2400      	movs	r4, #0
1a000808:	4b08      	ldr	r3, [pc, #32]	; (1a00082c <main+0xa0>)
1a00080a:	701c      	strb	r4, [r3, #0]
			UpdateTimers( ticks, NOF_TIMERS );
1a00080c:	2103      	movs	r1, #3
1a00080e:	4805      	ldr	r0, [pc, #20]	; (1a000824 <main+0x98>)
1a000810:	f000 f892 	bl	1a000938 <UpdateTimers>
			for (i = 0; i < NOF_TIMERS; i++) {
1a000814:	e7dd      	b.n	1a0007d2 <main+0x46>
				portonLevadizoIface_raise_evTECXNoOprimido(&statechart);
1a000816:	4804      	ldr	r0, [pc, #16]	; (1a000828 <main+0x9c>)
1a000818:	f7ff ff75 	bl	1a000706 <portonLevadizoIface_raise_evTECXNoOprimido>
1a00081c:	e7eb      	b.n	1a0007f6 <main+0x6a>
1a00081e:	bf00      	nop
1a000820:	1a000715 	.word	0x1a000715
1a000824:	1000006c 	.word	0x1000006c
1a000828:	1000004c 	.word	0x1000004c
1a00082c:	10000048 	.word	0x10000048

1a000830 <InitTimerTicks>:

void InitTimerTicks(TimerTicks *list, uint32_t len)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a000830:	f04f 0c00 	mov.w	ip, #0
1a000834:	458c      	cmp	ip, r1
1a000836:	d212      	bcs.n	1a00085e <InitTimerTicks+0x2e>
{
1a000838:	b500      	push	{lr}
		list[i].evid = (sc_eventid)0;
1a00083a:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
1a00083e:	eb00 120c 	add.w	r2, r0, ip, lsl #4
1a000842:	2300      	movs	r3, #0
1a000844:	f840 300e 	str.w	r3, [r0, lr]
		list[i].time_ms = 0;
1a000848:	6053      	str	r3, [r2, #4]
		list[i].count = 0;
1a00084a:	6093      	str	r3, [r2, #8]
		list[i].periodic = false;
1a00084c:	7313      	strb	r3, [r2, #12]
		list[i].active = false;
1a00084e:	7353      	strb	r3, [r2, #13]
		list[i].evPending = false;
1a000850:	7393      	strb	r3, [r2, #14]
	for(i = 0; i < len; i++) {
1a000852:	f10c 0c01 	add.w	ip, ip, #1
1a000856:	458c      	cmp	ip, r1
1a000858:	d3ef      	bcc.n	1a00083a <InitTimerTicks+0xa>
	}
}
1a00085a:	f85d fb04 	ldr.w	pc, [sp], #4
1a00085e:	4770      	bx	lr

1a000860 <SetNewTimerTick>:
sc_eventid SetNewTimerTick(TimerTicks *list, uint32_t len, sc_eventid evid, sc_uinteger time_ms, sc_boolean periodic)
{
	uint32_t i;

	sc_eventid ret = (sc_eventid)0;
	for(i = 0; i < len; i++) {
1a000860:	f04f 0c00 	mov.w	ip, #0
1a000864:	458c      	cmp	ip, r1
1a000866:	d219      	bcs.n	1a00089c <SetNewTimerTick+0x3c>
{
1a000868:	b530      	push	{r4, r5, lr}
		if(!list[i].evid) {
1a00086a:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
1a00086e:	eb00 150c 	add.w	r5, r0, ip, lsl #4
1a000872:	f850 400e 	ldr.w	r4, [r0, lr]
1a000876:	b12c      	cbz	r4, 1a000884 <SetNewTimerTick+0x24>
	for(i = 0; i < len; i++) {
1a000878:	f10c 0c01 	add.w	ip, ip, #1
1a00087c:	458c      	cmp	ip, r1
1a00087e:	d3f4      	bcc.n	1a00086a <SetNewTimerTick+0xa>
	sc_eventid ret = (sc_eventid)0;
1a000880:	2000      	movs	r0, #0
			list[i].evPending = false;
			ret = evid;
			break;
		}
	}
	return ret;
1a000882:	e00a      	b.n	1a00089a <SetNewTimerTick+0x3a>
			list[i].time_ms = time_ms;
1a000884:	606b      	str	r3, [r5, #4]
			list[i].count = time_ms;
1a000886:	60ab      	str	r3, [r5, #8]
			list[i].evid = evid;
1a000888:	602a      	str	r2, [r5, #0]
			list[i].periodic = periodic;
1a00088a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00088e:	732b      	strb	r3, [r5, #12]
			list[i].active = true;
1a000890:	2301      	movs	r3, #1
1a000892:	736b      	strb	r3, [r5, #13]
			list[i].evPending = false;
1a000894:	2300      	movs	r3, #0
1a000896:	73ab      	strb	r3, [r5, #14]
			ret = evid;
1a000898:	4610      	mov	r0, r2
}
1a00089a:	bd30      	pop	{r4, r5, pc}
	sc_eventid ret = (sc_eventid)0;
1a00089c:	2000      	movs	r0, #0
}
1a00089e:	4770      	bx	lr

1a0008a0 <UnsetTimerTick>:
void* UnsetTimerTick(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;
	sc_eventid ret = (sc_eventid)0;

	for(i = 0; i < len; i++) {
1a0008a0:	2300      	movs	r3, #0
1a0008a2:	428b      	cmp	r3, r1
1a0008a4:	d21c      	bcs.n	1a0008e0 <UnsetTimerTick+0x40>
{
1a0008a6:	b510      	push	{r4, lr}
		if(list[i].evid == id) {
1a0008a8:	ea4f 1c03 	mov.w	ip, r3, lsl #4
1a0008ac:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
1a0008b0:	f850 400c 	ldr.w	r4, [r0, ip]
1a0008b4:	4294      	cmp	r4, r2
1a0008b6:	d004      	beq.n	1a0008c2 <UnsetTimerTick+0x22>
	for(i = 0; i < len; i++) {
1a0008b8:	3301      	adds	r3, #1
1a0008ba:	428b      	cmp	r3, r1
1a0008bc:	d3f4      	bcc.n	1a0008a8 <UnsetTimerTick+0x8>
	sc_eventid ret = (sc_eventid)0;
1a0008be:	2000      	movs	r0, #0
			list[i].evPending = false;
			ret = id;
			break;
		}
	}
	return ret;
1a0008c0:	e00d      	b.n	1a0008de <UnsetTimerTick+0x3e>
			list[i].evid = (sc_eventid)0;
1a0008c2:	2300      	movs	r3, #0
1a0008c4:	f8ce 3000 	str.w	r3, [lr]
			list[i].time_ms = 0;
1a0008c8:	f8ce 3004 	str.w	r3, [lr, #4]
			list[i].count = 0;
1a0008cc:	f8ce 3008 	str.w	r3, [lr, #8]
			list[i].periodic = false;
1a0008d0:	f88e 300c 	strb.w	r3, [lr, #12]
			list[i].active = false;
1a0008d4:	f88e 300d 	strb.w	r3, [lr, #13]
			list[i].evPending = false;
1a0008d8:	f88e 300e 	strb.w	r3, [lr, #14]
			ret = id;
1a0008dc:	4610      	mov	r0, r2
}
1a0008de:	bd10      	pop	{r4, pc}
	sc_eventid ret = (sc_eventid)0;
1a0008e0:	2000      	movs	r0, #0
}
1a0008e2:	4770      	bx	lr

1a0008e4 <IsPendEvent>:


sc_boolean IsPendEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
1a0008e4:	b510      	push	{r4, lr}
1a0008e6:	4686      	mov	lr, r0
	int i;
	sc_boolean ret = false;
	for(i=0; i < len; i++) {
1a0008e8:	2300      	movs	r3, #0
1a0008ea:	e000      	b.n	1a0008ee <IsPendEvent+0xa>
1a0008ec:	3301      	adds	r3, #1
1a0008ee:	428b      	cmp	r3, r1
1a0008f0:	d20b      	bcs.n	1a00090a <IsPendEvent+0x26>
		if((list[i].evid == id) && (list[i].evPending == true)) {
1a0008f2:	ea4f 1c03 	mov.w	ip, r3, lsl #4
1a0008f6:	eb0e 1403 	add.w	r4, lr, r3, lsl #4
1a0008fa:	f85e 000c 	ldr.w	r0, [lr, ip]
1a0008fe:	4290      	cmp	r0, r2
1a000900:	d1f4      	bne.n	1a0008ec <IsPendEvent+0x8>
1a000902:	7ba0      	ldrb	r0, [r4, #14]
1a000904:	2800      	cmp	r0, #0
1a000906:	d0f1      	beq.n	1a0008ec <IsPendEvent+0x8>
1a000908:	e000      	b.n	1a00090c <IsPendEvent+0x28>
	sc_boolean ret = false;
1a00090a:	2000      	movs	r0, #0
			ret = true;
			break;
		}
	}
	return ret;
}
1a00090c:	bd10      	pop	{r4, pc}

1a00090e <MarkAsAttEvent>:

void MarkAsAttEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a00090e:	2300      	movs	r3, #0
1a000910:	428b      	cmp	r3, r1
1a000912:	d210      	bcs.n	1a000936 <MarkAsAttEvent+0x28>
{
1a000914:	b510      	push	{r4, lr}
		if(list[i].evid == id) {
1a000916:	ea4f 1c03 	mov.w	ip, r3, lsl #4
1a00091a:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
1a00091e:	f850 400c 	ldr.w	r4, [r0, ip]
1a000922:	4294      	cmp	r4, r2
1a000924:	d003      	beq.n	1a00092e <MarkAsAttEvent+0x20>
	for(i = 0; i < len; i++) {
1a000926:	3301      	adds	r3, #1
1a000928:	428b      	cmp	r3, r1
1a00092a:	d3f4      	bcc.n	1a000916 <MarkAsAttEvent+0x8>
1a00092c:	e002      	b.n	1a000934 <MarkAsAttEvent+0x26>
			list[i].evPending = false;
1a00092e:	2300      	movs	r3, #0
1a000930:	f88e 300e 	strb.w	r3, [lr, #14]
			break;
		}
	}
}
1a000934:	bd10      	pop	{r4, pc}
1a000936:	4770      	bx	lr

1a000938 <UpdateTimers>:

void UpdateTimers(TimerTicks *list, uint32_t len)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a000938:	2300      	movs	r3, #0
1a00093a:	428b      	cmp	r3, r1
1a00093c:	d21d      	bcs.n	1a00097a <UpdateTimers+0x42>
{
1a00093e:	b410      	push	{r4}
1a000940:	e006      	b.n	1a000950 <UpdateTimers+0x18>
				list[i].count--;
			if(!list[i].count) {
				if(list[i].periodic)
					list[i].count = list[i].time_ms;
				else
					list[i].active = false;
1a000942:	2400      	movs	r4, #0
1a000944:	7354      	strb	r4, [r2, #13]
				list[i].evPending = true;
1a000946:	2401      	movs	r4, #1
1a000948:	7394      	strb	r4, [r2, #14]
	for(i = 0; i < len; i++) {
1a00094a:	3301      	adds	r3, #1
1a00094c:	428b      	cmp	r3, r1
1a00094e:	d211      	bcs.n	1a000974 <UpdateTimers+0x3c>
		if(list[i].active == true) {
1a000950:	eb00 1203 	add.w	r2, r0, r3, lsl #4
1a000954:	7b54      	ldrb	r4, [r2, #13]
1a000956:	2c00      	cmp	r4, #0
1a000958:	d0f7      	beq.n	1a00094a <UpdateTimers+0x12>
			if(list[i].count)
1a00095a:	6894      	ldr	r4, [r2, #8]
1a00095c:	b10c      	cbz	r4, 1a000962 <UpdateTimers+0x2a>
				list[i].count--;
1a00095e:	3c01      	subs	r4, #1
1a000960:	6094      	str	r4, [r2, #8]
			if(!list[i].count) {
1a000962:	6894      	ldr	r4, [r2, #8]
1a000964:	2c00      	cmp	r4, #0
1a000966:	d1f0      	bne.n	1a00094a <UpdateTimers+0x12>
				if(list[i].periodic)
1a000968:	7b14      	ldrb	r4, [r2, #12]
1a00096a:	2c00      	cmp	r4, #0
1a00096c:	d0e9      	beq.n	1a000942 <UpdateTimers+0xa>
					list[i].count = list[i].time_ms;
1a00096e:	6854      	ldr	r4, [r2, #4]
1a000970:	6094      	str	r4, [r2, #8]
1a000972:	e7e8      	b.n	1a000946 <UpdateTimers+0xe>
			}
		}
	}
}
1a000974:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000978:	4770      	bx	lr
1a00097a:	4770      	bx	lr

1a00097c <initialise_monitor_handles>:
}
1a00097c:	4770      	bx	lr
	...

1a000980 <Reset_Handler>:
void Reset_Handler(void) {
1a000980:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000982:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000984:	4b19      	ldr	r3, [pc, #100]	; (1a0009ec <Reset_Handler+0x6c>)
1a000986:	4a1a      	ldr	r2, [pc, #104]	; (1a0009f0 <Reset_Handler+0x70>)
1a000988:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00098c:	4a19      	ldr	r2, [pc, #100]	; (1a0009f4 <Reset_Handler+0x74>)
1a00098e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000992:	2300      	movs	r3, #0
1a000994:	e005      	b.n	1a0009a2 <Reset_Handler+0x22>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000996:	4a18      	ldr	r2, [pc, #96]	; (1a0009f8 <Reset_Handler+0x78>)
1a000998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00099c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0009a0:	3301      	adds	r3, #1
1a0009a2:	2b07      	cmp	r3, #7
1a0009a4:	d9f7      	bls.n	1a000996 <Reset_Handler+0x16>
    __asm__ volatile("cpsie i");
1a0009a6:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0009a8:	4b14      	ldr	r3, [pc, #80]	; (1a0009fc <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0009aa:	e007      	b.n	1a0009bc <Reset_Handler+0x3c>
        SectionLen = *SectionTableAddr++;
1a0009ac:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0009b0:	689a      	ldr	r2, [r3, #8]
1a0009b2:	6859      	ldr	r1, [r3, #4]
1a0009b4:	6818      	ldr	r0, [r3, #0]
1a0009b6:	f7ff fbe8 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0009ba:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0009bc:	4a10      	ldr	r2, [pc, #64]	; (1a000a00 <Reset_Handler+0x80>)
1a0009be:	4293      	cmp	r3, r2
1a0009c0:	d3f4      	bcc.n	1a0009ac <Reset_Handler+0x2c>
1a0009c2:	e006      	b.n	1a0009d2 <Reset_Handler+0x52>
        ExeAddr = *SectionTableAddr++;
1a0009c4:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0009c6:	6859      	ldr	r1, [r3, #4]
1a0009c8:	f854 0b08 	ldr.w	r0, [r4], #8
1a0009cc:	f7ff fbec 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0009d0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0009d2:	4a0c      	ldr	r2, [pc, #48]	; (1a000a04 <Reset_Handler+0x84>)
1a0009d4:	4293      	cmp	r3, r2
1a0009d6:	d3f5      	bcc.n	1a0009c4 <Reset_Handler+0x44>
    SystemInit();
1a0009d8:	f000 fe7e 	bl	1a0016d8 <SystemInit>
    __libc_init_array();
1a0009dc:	f001 fa0e 	bl	1a001dfc <__libc_init_array>
    initialise_monitor_handles();
1a0009e0:	f7ff ffcc 	bl	1a00097c <initialise_monitor_handles>
    main();
1a0009e4:	f7ff fed2 	bl	1a00078c <main>
        __asm__ volatile("wfi");
1a0009e8:	bf30      	wfi
    while (1) {
1a0009ea:	e7fd      	b.n	1a0009e8 <Reset_Handler+0x68>
1a0009ec:	40053000 	.word	0x40053000
1a0009f0:	10df1000 	.word	0x10df1000
1a0009f4:	01dff7ff 	.word	0x01dff7ff
1a0009f8:	e000e280 	.word	0xe000e280
1a0009fc:	1a000114 	.word	0x1a000114
1a000a00:	1a000150 	.word	0x1a000150
1a000a04:	1a000178 	.word	0x1a000178

1a000a08 <_fini>:
void _fini(void) {}
1a000a08:	4770      	bx	lr

1a000a0a <_init>:
void _init(void) {}
1a000a0a:	4770      	bx	lr

1a000a0c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000a0c:	2200      	movs	r2, #0
1a000a0e:	2a05      	cmp	r2, #5
1a000a10:	d81b      	bhi.n	1a000a4a <Board_LED_Init+0x3e>
{
1a000a12:	b510      	push	{r4, lr}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000a14:	4b0d      	ldr	r3, [pc, #52]	; (1a000a4c <Board_LED_Init+0x40>)
1a000a16:	f813 e012 	ldrb.w	lr, [r3, r2, lsl #1]
1a000a1a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a000a1e:	f893 c001 	ldrb.w	ip, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000a22:	4b0b      	ldr	r3, [pc, #44]	; (1a000a50 <Board_LED_Init+0x44>)
1a000a24:	f50e 6400 	add.w	r4, lr, #2048	; 0x800
1a000a28:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
1a000a2c:	2001      	movs	r0, #1
1a000a2e:	fa00 f00c 	lsl.w	r0, r0, ip
1a000a32:	4301      	orrs	r1, r0
1a000a34:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000a38:	eb03 134e 	add.w	r3, r3, lr, lsl #5
1a000a3c:	2100      	movs	r1, #0
1a000a3e:	f803 100c 	strb.w	r1, [r3, ip]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000a42:	3201      	adds	r2, #1
1a000a44:	2a05      	cmp	r2, #5
1a000a46:	d9e5      	bls.n	1a000a14 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a000a48:	bd10      	pop	{r4, pc}
1a000a4a:	4770      	bx	lr
1a000a4c:	1a001e60 	.word	0x1a001e60
1a000a50:	400f4000 	.word	0x400f4000

1a000a54 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000a54:	2300      	movs	r3, #0
1a000a56:	2b03      	cmp	r3, #3
1a000a58:	d819      	bhi.n	1a000a8e <Board_TEC_Init+0x3a>
{
1a000a5a:	b410      	push	{r4}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000a5c:	490c      	ldr	r1, [pc, #48]	; (1a000a90 <Board_TEC_Init+0x3c>)
1a000a5e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000a62:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000a66:	f891 c001 	ldrb.w	ip, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000a6a:	4c0a      	ldr	r4, [pc, #40]	; (1a000a94 <Board_TEC_Init+0x40>)
1a000a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000a70:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000a74:	2001      	movs	r0, #1
1a000a76:	fa00 f00c 	lsl.w	r0, r0, ip
1a000a7a:	ea21 0100 	bic.w	r1, r1, r0
1a000a7e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000a82:	3301      	adds	r3, #1
1a000a84:	2b03      	cmp	r3, #3
1a000a86:	d9e9      	bls.n	1a000a5c <Board_TEC_Init+0x8>
   }
}
1a000a88:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000a8c:	4770      	bx	lr
1a000a8e:	4770      	bx	lr
1a000a90:	1a001e58 	.word	0x1a001e58
1a000a94:	400f4000 	.word	0x400f4000

1a000a98 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000a98:	2300      	movs	r3, #0
1a000a9a:	2b08      	cmp	r3, #8
1a000a9c:	d819      	bhi.n	1a000ad2 <Board_GPIO_Init+0x3a>
{
1a000a9e:	b410      	push	{r4}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000aa0:	490c      	ldr	r1, [pc, #48]	; (1a000ad4 <Board_GPIO_Init+0x3c>)
1a000aa2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000aa6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000aaa:	f891 c001 	ldrb.w	ip, [r1, #1]
1a000aae:	4c0a      	ldr	r4, [pc, #40]	; (1a000ad8 <Board_GPIO_Init+0x40>)
1a000ab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000ab4:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000ab8:	2001      	movs	r0, #1
1a000aba:	fa00 f00c 	lsl.w	r0, r0, ip
1a000abe:	ea21 0100 	bic.w	r1, r1, r0
1a000ac2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000ac6:	3301      	adds	r3, #1
1a000ac8:	2b08      	cmp	r3, #8
1a000aca:	d9e9      	bls.n	1a000aa0 <Board_GPIO_Init+0x8>
   }
}
1a000acc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000ad0:	4770      	bx	lr
1a000ad2:	4770      	bx	lr
1a000ad4:	1a001e6c 	.word	0x1a001e6c
1a000ad8:	400f4000 	.word	0x400f4000

1a000adc <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000adc:	b510      	push	{r4, lr}
1a000ade:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000ae0:	4c08      	ldr	r4, [pc, #32]	; (1a000b04 <Board_ADC_Init+0x28>)
1a000ae2:	4669      	mov	r1, sp
1a000ae4:	4620      	mov	r0, r4
1a000ae6:	f000 f8e3 	bl	1a000cb0 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000aea:	4a07      	ldr	r2, [pc, #28]	; (1a000b08 <Board_ADC_Init+0x2c>)
1a000aec:	4669      	mov	r1, sp
1a000aee:	4620      	mov	r0, r4
1a000af0:	f000 f8fe 	bl	1a000cf0 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000af4:	2200      	movs	r2, #0
1a000af6:	4669      	mov	r1, sp
1a000af8:	4620      	mov	r0, r4
1a000afa:	f000 f912 	bl	1a000d22 <Chip_ADC_SetResolution>
}
1a000afe:	b002      	add	sp, #8
1a000b00:	bd10      	pop	{r4, pc}
1a000b02:	bf00      	nop
1a000b04:	400e3000 	.word	0x400e3000
1a000b08:	00061a80 	.word	0x00061a80

1a000b0c <Board_SPI_Init>:
{
1a000b0c:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000b0e:	4c0b      	ldr	r4, [pc, #44]	; (1a000b3c <Board_SPI_Init+0x30>)
1a000b10:	4620      	mov	r0, r4
1a000b12:	f000 fc6b 	bl	1a0013ec <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000b16:	6863      	ldr	r3, [r4, #4]
1a000b18:	f023 0304 	bic.w	r3, r3, #4
1a000b1c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000b1e:	6823      	ldr	r3, [r4, #0]
1a000b20:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000b24:	f043 0307 	orr.w	r3, r3, #7
1a000b28:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000b2a:	4905      	ldr	r1, [pc, #20]	; (1a000b40 <Board_SPI_Init+0x34>)
1a000b2c:	4620      	mov	r0, r4
1a000b2e:	f000 fc3c 	bl	1a0013aa <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000b32:	6863      	ldr	r3, [r4, #4]
1a000b34:	f043 0302 	orr.w	r3, r3, #2
1a000b38:	6063      	str	r3, [r4, #4]
}
1a000b3a:	bd10      	pop	{r4, pc}
1a000b3c:	400c5000 	.word	0x400c5000
1a000b40:	000186a0 	.word	0x000186a0

1a000b44 <Board_I2C_Init>:
{
1a000b44:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000b46:	2000      	movs	r0, #0
1a000b48:	f000 fbde 	bl	1a001308 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000b4c:	4b04      	ldr	r3, [pc, #16]	; (1a000b60 <Board_I2C_Init+0x1c>)
1a000b4e:	f640 0208 	movw	r2, #2056	; 0x808
1a000b52:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000b56:	4903      	ldr	r1, [pc, #12]	; (1a000b64 <Board_I2C_Init+0x20>)
1a000b58:	2000      	movs	r0, #0
1a000b5a:	f000 fbe9 	bl	1a001330 <Chip_I2C_SetClockRate>
}
1a000b5e:	bd08      	pop	{r3, pc}
1a000b60:	40086000 	.word	0x40086000
1a000b64:	000f4240 	.word	0x000f4240

1a000b68 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000b68:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000b6a:	4c07      	ldr	r4, [pc, #28]	; (1a000b88 <Board_Debug_Init+0x20>)
1a000b6c:	4620      	mov	r0, r4
1a000b6e:	f000 fd1b 	bl	1a0015a8 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000b72:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000b76:	4620      	mov	r0, r4
1a000b78:	f000 fd40 	bl	1a0015fc <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000b7c:	2303      	movs	r3, #3
1a000b7e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000b80:	2301      	movs	r3, #1
1a000b82:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000b84:	bd10      	pop	{r4, pc}
1a000b86:	bf00      	nop
1a000b88:	400c1000 	.word	0x400c1000

1a000b8c <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000b8c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000b8e:	f7ff ffeb 	bl	1a000b68 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000b92:	4809      	ldr	r0, [pc, #36]	; (1a000bb8 <Board_Init+0x2c>)
1a000b94:	f000 fba6 	bl	1a0012e4 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000b98:	f7ff ff7e 	bl	1a000a98 <Board_GPIO_Init>
   Board_ADC_Init();
1a000b9c:	f7ff ff9e 	bl	1a000adc <Board_ADC_Init>
   Board_SPI_Init();
1a000ba0:	f7ff ffb4 	bl	1a000b0c <Board_SPI_Init>
   Board_I2C_Init();
1a000ba4:	f7ff ffce 	bl	1a000b44 <Board_I2C_Init>

   Board_LED_Init();
1a000ba8:	f7ff ff30 	bl	1a000a0c <Board_LED_Init>
   Board_TEC_Init();
1a000bac:	f7ff ff52 	bl	1a000a54 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000bb0:	f000 f8be 	bl	1a000d30 <SystemCoreClockUpdate>
}
1a000bb4:	bd08      	pop	{r3, pc}
1a000bb6:	bf00      	nop
1a000bb8:	400f4000 	.word	0x400f4000

1a000bbc <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000bbc:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000bbe:	f7ff ffd3 	bl	1a000b68 <Board_Debug_Init>
1a000bc2:	bd08      	pop	{r3, pc}

1a000bc4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000bc4:	2300      	movs	r3, #0
1a000bc6:	e00c      	b.n	1a000be2 <Board_SetupMuxing+0x1e>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000bc8:	4a07      	ldr	r2, [pc, #28]	; (1a000be8 <Board_SetupMuxing+0x24>)
1a000bca:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000bce:	f812 c023 	ldrb.w	ip, [r2, r3, lsl #2]
1a000bd2:	784a      	ldrb	r2, [r1, #1]
1a000bd4:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000bd6:	eb02 124c 	add.w	r2, r2, ip, lsl #5
1a000bda:	4904      	ldr	r1, [pc, #16]	; (1a000bec <Board_SetupMuxing+0x28>)
1a000bdc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000be0:	3301      	adds	r3, #1
1a000be2:	2b1c      	cmp	r3, #28
1a000be4:	d9f0      	bls.n	1a000bc8 <Board_SetupMuxing+0x4>


void Board_SetupMuxing(void)
{
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000be6:	4770      	bx	lr
1a000be8:	1a001e88 	.word	0x1a001e88
1a000bec:	40086000 	.word	0x40086000

1a000bf0 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000bf0:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000bf2:	4a17      	ldr	r2, [pc, #92]	; (1a000c50 <Board_SetupClocking+0x60>)
1a000bf4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000bf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000bfc:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000c00:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000c04:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000c08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000c0c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000c10:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000c14:	2201      	movs	r2, #1
1a000c16:	490f      	ldr	r1, [pc, #60]	; (1a000c54 <Board_SetupClocking+0x64>)
1a000c18:	2006      	movs	r0, #6
1a000c1a:	f000 fc03 	bl	1a001424 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000c1e:	2400      	movs	r4, #0
1a000c20:	b14c      	cbz	r4, 1a000c36 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000c22:	4b0b      	ldr	r3, [pc, #44]	; (1a000c50 <Board_SetupClocking+0x60>)
1a000c24:	685a      	ldr	r2, [r3, #4]
1a000c26:	f022 020c 	bic.w	r2, r2, #12
1a000c2a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000c2c:	685a      	ldr	r2, [r3, #4]
1a000c2e:	f042 0203 	orr.w	r2, r2, #3
1a000c32:	605a      	str	r2, [r3, #4]
}
1a000c34:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000c36:	4808      	ldr	r0, [pc, #32]	; (1a000c58 <Board_SetupClocking+0x68>)
1a000c38:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000c3c:	2301      	movs	r3, #1
1a000c3e:	788a      	ldrb	r2, [r1, #2]
1a000c40:	7849      	ldrb	r1, [r1, #1]
1a000c42:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000c46:	f000 faa7 	bl	1a001198 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000c4a:	3401      	adds	r4, #1
1a000c4c:	e7e8      	b.n	1a000c20 <Board_SetupClocking+0x30>
1a000c4e:	bf00      	nop
1a000c50:	40043000 	.word	0x40043000
1a000c54:	0c28cb00 	.word	0x0c28cb00
1a000c58:	1a001e84 	.word	0x1a001e84

1a000c5c <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000c5c:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000c5e:	f7ff ffb1 	bl	1a000bc4 <Board_SetupMuxing>
    Board_SetupClocking();
1a000c62:	f7ff ffc5 	bl	1a000bf0 <Board_SetupClocking>
}
1a000c66:	bd08      	pop	{r3, pc}

1a000c68 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000c68:	4b03      	ldr	r3, [pc, #12]	; (1a000c78 <Chip_ADC_GetClockIndex+0x10>)
1a000c6a:	4298      	cmp	r0, r3
1a000c6c:	d001      	beq.n	1a000c72 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000c6e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000c70:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000c72:	2004      	movs	r0, #4
1a000c74:	4770      	bx	lr
1a000c76:	bf00      	nop
1a000c78:	400e4000 	.word	0x400e4000

1a000c7c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000c7c:	b570      	push	{r4, r5, r6, lr}
1a000c7e:	460d      	mov	r5, r1
1a000c80:	4614      	mov	r4, r2
1a000c82:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000c84:	f7ff fff0 	bl	1a000c68 <Chip_ADC_GetClockIndex>
1a000c88:	f000 fb06 	bl	1a001298 <Chip_Clock_GetRate>
	if (burstMode) {
1a000c8c:	b155      	cbz	r5, 1a000ca4 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000c8e:	fb06 f404 	mul.w	r4, r6, r4
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000c92:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000c96:	0064      	lsls	r4, r4, #1
1a000c98:	fbb0 f0f4 	udiv	r0, r0, r4
1a000c9c:	b2c0      	uxtb	r0, r0
1a000c9e:	3801      	subs	r0, #1
	return div;
}
1a000ca0:	b2c0      	uxtb	r0, r0
1a000ca2:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000ca4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000ca8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000cac:	e7f1      	b.n	1a000c92 <getClkDiv+0x16>
	...

1a000cb0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000cb0:	b538      	push	{r3, r4, r5, lr}
1a000cb2:	4605      	mov	r5, r0
1a000cb4:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000cb6:	f7ff ffd7 	bl	1a000c68 <Chip_ADC_GetClockIndex>
1a000cba:	2301      	movs	r3, #1
1a000cbc:	461a      	mov	r2, r3
1a000cbe:	4619      	mov	r1, r3
1a000cc0:	f000 fab2 	bl	1a001228 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000cc4:	2100      	movs	r1, #0
1a000cc6:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000cc8:	4a08      	ldr	r2, [pc, #32]	; (1a000cec <Chip_ADC_Init+0x3c>)
1a000cca:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000ccc:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000cce:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000cd0:	230b      	movs	r3, #11
1a000cd2:	4628      	mov	r0, r5
1a000cd4:	f7ff ffd2 	bl	1a000c7c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000cd8:	0200      	lsls	r0, r0, #8
1a000cda:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000cde:	7923      	ldrb	r3, [r4, #4]
1a000ce0:	045b      	lsls	r3, r3, #17
1a000ce2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000ce6:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000ce8:	602b      	str	r3, [r5, #0]
}
1a000cea:	bd38      	pop	{r3, r4, r5, pc}
1a000cec:	00061a80 	.word	0x00061a80

1a000cf0 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000cf0:	b570      	push	{r4, r5, r6, lr}
1a000cf2:	4605      	mov	r5, r0
1a000cf4:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000cf6:	6804      	ldr	r4, [r0, #0]
1a000cf8:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000cfc:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000d00:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000d02:	790b      	ldrb	r3, [r1, #4]
1a000d04:	f1c3 030b 	rsb	r3, r3, #11
1a000d08:	b2db      	uxtb	r3, r3
1a000d0a:	7949      	ldrb	r1, [r1, #5]
1a000d0c:	f7ff ffb6 	bl	1a000c7c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000d10:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000d14:	7933      	ldrb	r3, [r6, #4]
1a000d16:	045b      	lsls	r3, r3, #17
1a000d18:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000d1c:	4323      	orrs	r3, r4
	pADC->CR = cr;
1a000d1e:	602b      	str	r3, [r5, #0]
}
1a000d20:	bd70      	pop	{r4, r5, r6, pc}

1a000d22 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000d22:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000d24:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000d26:	680a      	ldr	r2, [r1, #0]
1a000d28:	f7ff ffe2 	bl	1a000cf0 <Chip_ADC_SetSampleRate>
}
1a000d2c:	bd08      	pop	{r3, pc}
	...

1a000d30 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000d30:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000d32:	2069      	movs	r0, #105	; 0x69
1a000d34:	f000 fab0 	bl	1a001298 <Chip_Clock_GetRate>
1a000d38:	4b01      	ldr	r3, [pc, #4]	; (1a000d40 <SystemCoreClockUpdate+0x10>)
1a000d3a:	6018      	str	r0, [r3, #0]
}
1a000d3c:	bd08      	pop	{r3, pc}
1a000d3e:	bf00      	nop
1a000d40:	1000009c 	.word	0x1000009c

1a000d44 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000d44:	b570      	push	{r4, r5, r6, lr}
1a000d46:	4686      	mov	lr, r0

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000d48:	680b      	ldr	r3, [r1, #0]
1a000d4a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000d4e:	d002      	beq.n	1a000d56 <pll_calc_divs+0x12>
		ppll->ctrl &= ~(1 << 6);
1a000d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000d54:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000d56:	4675      	mov	r5, lr
1a000d58:	2401      	movs	r4, #1
1a000d5a:	e03c      	b.n	1a000dd6 <pll_calc_divs+0x92>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000d5c:	694b      	ldr	r3, [r1, #20]
1a000d5e:	fb02 f303 	mul.w	r3, r2, r3
1a000d62:	fbb3 f3f4 	udiv	r3, r3, r4
1a000d66:	e01e      	b.n	1a000da6 <pll_calc_divs+0x62>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000d68:	4618      	mov	r0, r3
	if (val < 0)
1a000d6a:	ebbe 0600 	subs.w	r6, lr, r0
1a000d6e:	d428      	bmi.n	1a000dc2 <pll_calc_divs+0x7e>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000d70:	42b5      	cmp	r5, r6
1a000d72:	d907      	bls.n	1a000d84 <pll_calc_divs+0x40>
					ppll->nsel = n;
1a000d74:	608c      	str	r4, [r1, #8]
					ppll->psel = p + 1;
1a000d76:	f10c 0501 	add.w	r5, ip, #1
1a000d7a:	60cd      	str	r5, [r1, #12]
					ppll->msel = m;
1a000d7c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000d7e:	6188      	str	r0, [r1, #24]
					ppll->fcco = fcco;
1a000d80:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000d82:	4635      	mov	r5, r6
			for (m = 1; m <= 256; m++) {
1a000d84:	3201      	adds	r2, #1
1a000d86:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000d8a:	dc1c      	bgt.n	1a000dc6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000d8c:	680e      	ldr	r6, [r1, #0]
1a000d8e:	f016 0f40 	tst.w	r6, #64	; 0x40
1a000d92:	d0e3      	beq.n	1a000d5c <pll_calc_divs+0x18>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000d94:	f10c 0301 	add.w	r3, ip, #1
1a000d98:	fa02 f303 	lsl.w	r3, r2, r3
1a000d9c:	6948      	ldr	r0, [r1, #20]
1a000d9e:	fb00 f303 	mul.w	r3, r0, r3
1a000da2:	fbb3 f3f4 	udiv	r3, r3, r4
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000da6:	480f      	ldr	r0, [pc, #60]	; (1a000de4 <pll_calc_divs+0xa0>)
1a000da8:	4283      	cmp	r3, r0
1a000daa:	d9eb      	bls.n	1a000d84 <pll_calc_divs+0x40>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000dac:	480e      	ldr	r0, [pc, #56]	; (1a000de8 <pll_calc_divs+0xa4>)
1a000dae:	4283      	cmp	r3, r0
1a000db0:	d809      	bhi.n	1a000dc6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000db2:	f016 0f80 	tst.w	r6, #128	; 0x80
1a000db6:	d1d7      	bne.n	1a000d68 <pll_calc_divs+0x24>
					fout = fcco >> (p + 1);
1a000db8:	f10c 0001 	add.w	r0, ip, #1
1a000dbc:	fa23 f000 	lsr.w	r0, r3, r0
1a000dc0:	e7d3      	b.n	1a000d6a <pll_calc_divs+0x26>
		return -val;
1a000dc2:	4276      	negs	r6, r6
1a000dc4:	e7d4      	b.n	1a000d70 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000dc6:	f10c 0c01 	add.w	ip, ip, #1
1a000dca:	f1bc 0f03 	cmp.w	ip, #3
1a000dce:	dc01      	bgt.n	1a000dd4 <pll_calc_divs+0x90>
			for (m = 1; m <= 256; m++) {
1a000dd0:	2201      	movs	r2, #1
1a000dd2:	e7d8      	b.n	1a000d86 <pll_calc_divs+0x42>
	for (n = 1; n <= 4; n++) {
1a000dd4:	3401      	adds	r4, #1
1a000dd6:	2c04      	cmp	r4, #4
1a000dd8:	dc02      	bgt.n	1a000de0 <pll_calc_divs+0x9c>
		for (p = 0; p < 4; p ++) {
1a000dda:	f04f 0c00 	mov.w	ip, #0
1a000dde:	e7f4      	b.n	1a000dca <pll_calc_divs+0x86>
				}
			}
		}
	}
}
1a000de0:	bd70      	pop	{r4, r5, r6, pc}
1a000de2:	bf00      	nop
1a000de4:	094c5eff 	.word	0x094c5eff
1a000de8:	1312d000 	.word	0x1312d000

1a000dec <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000dee:	b09d      	sub	sp, #116	; 0x74
1a000df0:	4605      	mov	r5, r0
1a000df2:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000df4:	2260      	movs	r2, #96	; 0x60
1a000df6:	2100      	movs	r1, #0
1a000df8:	a801      	add	r0, sp, #4
1a000dfa:	f001 f823 	bl	1a001e44 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000dfe:	2380      	movs	r3, #128	; 0x80
1a000e00:	9301      	str	r3, [sp, #4]
	pll[0].fin = ppll->fin;
1a000e02:	6963      	ldr	r3, [r4, #20]
1a000e04:	9306      	str	r3, [sp, #24]
	pll[0].srcin = ppll->srcin;
1a000e06:	7923      	ldrb	r3, [r4, #4]
1a000e08:	f88d 3008 	strb.w	r3, [sp, #8]
	pll_calc_divs(freq, &pll[0]);
1a000e0c:	a901      	add	r1, sp, #4
1a000e0e:	4628      	mov	r0, r5
1a000e10:	f7ff ff98 	bl	1a000d44 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000e14:	9b07      	ldr	r3, [sp, #28]
1a000e16:	42ab      	cmp	r3, r5
1a000e18:	d02a      	beq.n	1a000e70 <pll_get_frac+0x84>
	if (val < 0)
1a000e1a:	1aeb      	subs	r3, r5, r3
1a000e1c:	d431      	bmi.n	1a000e82 <pll_get_frac+0x96>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000e1e:	461e      	mov	r6, r3
1a000e20:	9319      	str	r3, [sp, #100]	; 0x64

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000e22:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000e28:	9311      	str	r3, [sp, #68]	; 0x44
	pll[2].fin = ppll->fin;
1a000e2a:	6963      	ldr	r3, [r4, #20]
1a000e2c:	9316      	str	r3, [sp, #88]	; 0x58
	pll[2].srcin = ppll->srcin;
1a000e2e:	7923      	ldrb	r3, [r4, #4]
1a000e30:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	pll_calc_divs(freq, &pll[2]);
1a000e34:	a911      	add	r1, sp, #68	; 0x44
1a000e36:	4628      	mov	r0, r5
1a000e38:	f7ff ff84 	bl	1a000d44 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000e3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a000e3e:	42ab      	cmp	r3, r5
1a000e40:	d021      	beq.n	1a000e86 <pll_get_frac+0x9a>
	if (val < 0)
1a000e42:	1aeb      	subs	r3, r5, r3
1a000e44:	d427      	bmi.n	1a000e96 <pll_get_frac+0xaa>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000e46:	461f      	mov	r7, r3
1a000e48:	931b      	str	r3, [sp, #108]	; 0x6c
	
	if (freq <= 110000000) {
1a000e4a:	4b2b      	ldr	r3, [pc, #172]	; (1a000ef8 <pll_get_frac+0x10c>)
1a000e4c:	429d      	cmp	r5, r3
1a000e4e:	d924      	bls.n	1a000e9a <pll_get_frac+0xae>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000e50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	if (val < 0)
1a000e52:	1aed      	subs	r5, r5, r3
1a000e54:	d434      	bmi.n	1a000ec0 <pll_get_frac+0xd4>
	diff[1] = ABS(freq - pll[1].fout);
1a000e56:	951a      	str	r5, [sp, #104]	; 0x68

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000e58:	42ae      	cmp	r6, r5
1a000e5a:	dc3b      	bgt.n	1a000ed4 <pll_get_frac+0xe8>
		if (diff[0] <= diff[2]) {
1a000e5c:	42be      	cmp	r6, r7
1a000e5e:	dc31      	bgt.n	1a000ec4 <pll_get_frac+0xd8>
			*ppll = pll[0];
1a000e60:	ad01      	add	r5, sp, #4
1a000e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e6e:	e006      	b.n	1a000e7e <pll_get_frac+0x92>
		*ppll = pll[0];
1a000e70:	ad01      	add	r5, sp, #4
1a000e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000e7e:	b01d      	add	sp, #116	; 0x74
1a000e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000e82:	425b      	negs	r3, r3
1a000e84:	e7cb      	b.n	1a000e1e <pll_get_frac+0x32>
		*ppll = pll[2];
1a000e86:	ad11      	add	r5, sp, #68	; 0x44
1a000e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000e94:	e7f3      	b.n	1a000e7e <pll_get_frac+0x92>
		return -val;
1a000e96:	425b      	negs	r3, r3
1a000e98:	e7d5      	b.n	1a000e46 <pll_get_frac+0x5a>
		pll[1].ctrl = (1 << 6);
1a000e9a:	2340      	movs	r3, #64	; 0x40
1a000e9c:	9309      	str	r3, [sp, #36]	; 0x24
		pll[1].fin = ppll->fin;
1a000e9e:	6963      	ldr	r3, [r4, #20]
1a000ea0:	930e      	str	r3, [sp, #56]	; 0x38
		pll_calc_divs(freq, &pll[1]);
1a000ea2:	a909      	add	r1, sp, #36	; 0x24
1a000ea4:	4628      	mov	r0, r5
1a000ea6:	f7ff ff4d 	bl	1a000d44 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a000eac:	42ab      	cmp	r3, r5
1a000eae:	d1cf      	bne.n	1a000e50 <pll_get_frac+0x64>
			*ppll = pll[1];
1a000eb0:	ad09      	add	r5, sp, #36	; 0x24
1a000eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000eb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000eba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000ebe:	e7de      	b.n	1a000e7e <pll_get_frac+0x92>
		return -val;
1a000ec0:	426d      	negs	r5, r5
1a000ec2:	e7c8      	b.n	1a000e56 <pll_get_frac+0x6a>
			*ppll = pll[2];
1a000ec4:	ad11      	add	r5, sp, #68	; 0x44
1a000ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000eca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ece:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ed2:	e7d4      	b.n	1a000e7e <pll_get_frac+0x92>
		if (diff[1] <= diff[2]) {
1a000ed4:	42af      	cmp	r7, r5
1a000ed6:	db07      	blt.n	1a000ee8 <pll_get_frac+0xfc>
			*ppll = pll[1];
1a000ed8:	ad09      	add	r5, sp, #36	; 0x24
1a000eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ede:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ee2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ee6:	e7ca      	b.n	1a000e7e <pll_get_frac+0x92>
			*ppll = pll[2];
1a000ee8:	ad11      	add	r5, sp, #68	; 0x44
1a000eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000eee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ef2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ef6:	e7c2      	b.n	1a000e7e <pll_get_frac+0x92>
1a000ef8:	068e7780 	.word	0x068e7780

1a000efc <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000efc:	4684      	mov	ip, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000efe:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000f00:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000f02:	281c      	cmp	r0, #28
1a000f04:	d120      	bne.n	1a000f48 <Chip_Clock_FindBaseClock+0x4c>
{
1a000f06:	b410      	push	{r4}
1a000f08:	e002      	b.n	1a000f10 <Chip_Clock_FindBaseClock+0x14>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000f0a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000f0c:	281c      	cmp	r0, #28
1a000f0e:	d118      	bne.n	1a000f42 <Chip_Clock_FindBaseClock+0x46>
1a000f10:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000f14:	4a0d      	ldr	r2, [pc, #52]	; (1a000f4c <Chip_Clock_FindBaseClock+0x50>)
1a000f16:	eb02 0241 	add.w	r2, r2, r1, lsl #1
1a000f1a:	7911      	ldrb	r1, [r2, #4]
1a000f1c:	4281      	cmp	r1, r0
1a000f1e:	d010      	beq.n	1a000f42 <Chip_Clock_FindBaseClock+0x46>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000f20:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000f24:	4c09      	ldr	r4, [pc, #36]	; (1a000f4c <Chip_Clock_FindBaseClock+0x50>)
1a000f26:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
1a000f2a:	4562      	cmp	r2, ip
1a000f2c:	d8ed      	bhi.n	1a000f0a <Chip_Clock_FindBaseClock+0xe>
1a000f2e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
1a000f32:	4a06      	ldr	r2, [pc, #24]	; (1a000f4c <Chip_Clock_FindBaseClock+0x50>)
1a000f34:	eb02 0244 	add.w	r2, r2, r4, lsl #1
1a000f38:	8852      	ldrh	r2, [r2, #2]
1a000f3a:	4562      	cmp	r2, ip
1a000f3c:	d3e5      	bcc.n	1a000f0a <Chip_Clock_FindBaseClock+0xe>
			baseclk = periph_to_base[i].clkbase;
1a000f3e:	4608      	mov	r0, r1
1a000f40:	e7e4      	b.n	1a000f0c <Chip_Clock_FindBaseClock+0x10>
		}
	}

	return baseclk;
}
1a000f42:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000f46:	4770      	bx	lr
1a000f48:	4770      	bx	lr
1a000f4a:	bf00      	nop
1a000f4c:	1a001f04 	.word	0x1a001f04

1a000f50 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000f50:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000f56:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000f58:	4a0d      	ldr	r2, [pc, #52]	; (1a000f90 <Chip_Clock_EnableCrystal+0x40>)
1a000f5a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000f5c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000f60:	6992      	ldr	r2, [r2, #24]
1a000f62:	428a      	cmp	r2, r1
1a000f64:	d001      	beq.n	1a000f6a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000f66:	4a0a      	ldr	r2, [pc, #40]	; (1a000f90 <Chip_Clock_EnableCrystal+0x40>)
1a000f68:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000f6a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000f6e:	4a09      	ldr	r2, [pc, #36]	; (1a000f94 <Chip_Clock_EnableCrystal+0x44>)
1a000f70:	6811      	ldr	r1, [r2, #0]
1a000f72:	4a09      	ldr	r2, [pc, #36]	; (1a000f98 <Chip_Clock_EnableCrystal+0x48>)
1a000f74:	4291      	cmp	r1, r2
1a000f76:	d901      	bls.n	1a000f7c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000f78:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000f7c:	4a04      	ldr	r2, [pc, #16]	; (1a000f90 <Chip_Clock_EnableCrystal+0x40>)
1a000f7e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000f80:	9b01      	ldr	r3, [sp, #4]
1a000f82:	1e5a      	subs	r2, r3, #1
1a000f84:	9201      	str	r2, [sp, #4]
1a000f86:	2b00      	cmp	r3, #0
1a000f88:	d1fa      	bne.n	1a000f80 <Chip_Clock_EnableCrystal+0x30>
}
1a000f8a:	b002      	add	sp, #8
1a000f8c:	4770      	bx	lr
1a000f8e:	bf00      	nop
1a000f90:	40050000 	.word	0x40050000
1a000f94:	1a001e80 	.word	0x1a001e80
1a000f98:	01312cff 	.word	0x01312cff

1a000f9c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000f9c:	3012      	adds	r0, #18
1a000f9e:	4b05      	ldr	r3, [pc, #20]	; (1a000fb4 <Chip_Clock_GetDividerSource+0x18>)
1a000fa0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000fa4:	f010 0f01 	tst.w	r0, #1
1a000fa8:	d102      	bne.n	1a000fb0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000faa:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000fae:	4770      	bx	lr
		return CLKINPUT_PD;
1a000fb0:	2011      	movs	r0, #17
}
1a000fb2:	4770      	bx	lr
1a000fb4:	40050000 	.word	0x40050000

1a000fb8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000fb8:	f100 0212 	add.w	r2, r0, #18
1a000fbc:	4b03      	ldr	r3, [pc, #12]	; (1a000fcc <Chip_Clock_GetDividerDivisor+0x14>)
1a000fbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000fc2:	4b03      	ldr	r3, [pc, #12]	; (1a000fd0 <Chip_Clock_GetDividerDivisor+0x18>)
1a000fc4:	5c18      	ldrb	r0, [r3, r0]
}
1a000fc6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000fca:	4770      	bx	lr
1a000fcc:	40050000 	.word	0x40050000
1a000fd0:	1a001efc 	.word	0x1a001efc

1a000fd4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000fd4:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000fd6:	2810      	cmp	r0, #16
1a000fd8:	d80a      	bhi.n	1a000ff0 <Chip_Clock_GetClockInputHz+0x1c>
1a000fda:	e8df f000 	tbb	[pc, r0]
1a000fde:	0b44      	.short	0x0b44
1a000fe0:	0921180d 	.word	0x0921180d
1a000fe4:	2d2a2724 	.word	0x2d2a2724
1a000fe8:	34300909 	.word	0x34300909
1a000fec:	3c38      	.short	0x3c38
1a000fee:	40          	.byte	0x40
1a000fef:	00          	.byte	0x00
1a000ff0:	2000      	movs	r0, #0
	default:
		break;
	}

	return rate;
}
1a000ff2:	bd08      	pop	{r3, pc}
		rate = CGU_IRC_FREQ;
1a000ff4:	481e      	ldr	r0, [pc, #120]	; (1a001070 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000ff6:	e7fc      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000ff8:	4b1e      	ldr	r3, [pc, #120]	; (1a001074 <Chip_Clock_GetClockInputHz+0xa0>)
1a000ffa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000ffe:	f003 0307 	and.w	r3, r3, #7
1a001002:	2b04      	cmp	r3, #4
1a001004:	d001      	beq.n	1a00100a <Chip_Clock_GetClockInputHz+0x36>
			rate = 25000000;
1a001006:	481c      	ldr	r0, [pc, #112]	; (1a001078 <Chip_Clock_GetClockInputHz+0xa4>)
1a001008:	e7f3      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
	uint32_t rate = 0;
1a00100a:	2000      	movs	r0, #0
1a00100c:	e7f1      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00100e:	4b19      	ldr	r3, [pc, #100]	; (1a001074 <Chip_Clock_GetClockInputHz+0xa0>)
1a001010:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001014:	f003 0307 	and.w	r3, r3, #7
1a001018:	2b04      	cmp	r3, #4
1a00101a:	d027      	beq.n	1a00106c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a00101c:	4816      	ldr	r0, [pc, #88]	; (1a001078 <Chip_Clock_GetClockInputHz+0xa4>)
1a00101e:	e7e8      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		rate = ExtRateIn;
1a001020:	4b16      	ldr	r3, [pc, #88]	; (1a00107c <Chip_Clock_GetClockInputHz+0xa8>)
1a001022:	6818      	ldr	r0, [r3, #0]
		break;
1a001024:	e7e5      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		rate = OscRateIn;
1a001026:	4b16      	ldr	r3, [pc, #88]	; (1a001080 <Chip_Clock_GetClockInputHz+0xac>)
1a001028:	6818      	ldr	r0, [r3, #0]
		break;
1a00102a:	e7e2      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00102c:	4b15      	ldr	r3, [pc, #84]	; (1a001084 <Chip_Clock_GetClockInputHz+0xb0>)
1a00102e:	6818      	ldr	r0, [r3, #0]
		break;
1a001030:	e7df      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001032:	4b14      	ldr	r3, [pc, #80]	; (1a001084 <Chip_Clock_GetClockInputHz+0xb0>)
1a001034:	6858      	ldr	r0, [r3, #4]
		break;
1a001036:	e7dc      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetMainPLLHz();
1a001038:	f000 f868 	bl	1a00110c <Chip_Clock_GetMainPLLHz>
		break;
1a00103c:	e7d9      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00103e:	2100      	movs	r1, #0
1a001040:	f000 f898 	bl	1a001174 <Chip_Clock_GetDivRate>
		break;
1a001044:	e7d5      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001046:	2101      	movs	r1, #1
1a001048:	f000 f894 	bl	1a001174 <Chip_Clock_GetDivRate>
		break;
1a00104c:	e7d1      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00104e:	2102      	movs	r1, #2
1a001050:	f000 f890 	bl	1a001174 <Chip_Clock_GetDivRate>
		break;
1a001054:	e7cd      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001056:	2103      	movs	r1, #3
1a001058:	f000 f88c 	bl	1a001174 <Chip_Clock_GetDivRate>
		break;
1a00105c:	e7c9      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00105e:	2104      	movs	r1, #4
1a001060:	f000 f888 	bl	1a001174 <Chip_Clock_GetDivRate>
		break;
1a001064:	e7c5      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
		rate = CRYSTAL_32K_FREQ_IN;
1a001066:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a00106a:	e7c2      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
			rate = 50000000; /* RMII uses 50 MHz */
1a00106c:	4806      	ldr	r0, [pc, #24]	; (1a001088 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00106e:	e7c0      	b.n	1a000ff2 <Chip_Clock_GetClockInputHz+0x1e>
1a001070:	00b71b00 	.word	0x00b71b00
1a001074:	40043000 	.word	0x40043000
1a001078:	017d7840 	.word	0x017d7840
1a00107c:	1a001e54 	.word	0x1a001e54
1a001080:	1a001e80 	.word	0x1a001e80
1a001084:	100000a0 	.word	0x100000a0
1a001088:	02faf080 	.word	0x02faf080

1a00108c <Chip_Clock_CalcMainPLLValue>:
{
1a00108c:	b538      	push	{r3, r4, r5, lr}
1a00108e:	4605      	mov	r5, r0
1a001090:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001092:	7908      	ldrb	r0, [r1, #4]
1a001094:	f7ff ff9e 	bl	1a000fd4 <Chip_Clock_GetClockInputHz>
1a001098:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00109a:	4b19      	ldr	r3, [pc, #100]	; (1a001100 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00109c:	442b      	add	r3, r5
1a00109e:	4a19      	ldr	r2, [pc, #100]	; (1a001104 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0010a0:	4293      	cmp	r3, r2
1a0010a2:	d821      	bhi.n	1a0010e8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0010a4:	b318      	cbz	r0, 1a0010ee <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0010a6:	2380      	movs	r3, #128	; 0x80
1a0010a8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0010aa:	2300      	movs	r3, #0
1a0010ac:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0010ae:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0010b0:	fbb5 f3f0 	udiv	r3, r5, r0
1a0010b4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0010b6:	4a14      	ldr	r2, [pc, #80]	; (1a001108 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0010b8:	4295      	cmp	r5, r2
1a0010ba:	d903      	bls.n	1a0010c4 <Chip_Clock_CalcMainPLLValue+0x38>
1a0010bc:	fb00 f303 	mul.w	r3, r0, r3
1a0010c0:	42ab      	cmp	r3, r5
1a0010c2:	d007      	beq.n	1a0010d4 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0010c4:	4621      	mov	r1, r4
1a0010c6:	4628      	mov	r0, r5
1a0010c8:	f7ff fe90 	bl	1a000dec <pll_get_frac>
		if (!ppll->nsel) {
1a0010cc:	68a3      	ldr	r3, [r4, #8]
1a0010ce:	b18b      	cbz	r3, 1a0010f4 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0010d0:	3b01      	subs	r3, #1
1a0010d2:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0010d4:	6923      	ldr	r3, [r4, #16]
1a0010d6:	b183      	cbz	r3, 1a0010fa <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0010d8:	68e2      	ldr	r2, [r4, #12]
1a0010da:	b10a      	cbz	r2, 1a0010e0 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0010dc:	3a01      	subs	r2, #1
1a0010de:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0010e0:	3b01      	subs	r3, #1
1a0010e2:	6123      	str	r3, [r4, #16]
	return 0;
1a0010e4:	2000      	movs	r0, #0
}
1a0010e6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0010e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010ec:	e7fb      	b.n	1a0010e6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0010ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010f2:	e7f8      	b.n	1a0010e6 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0010f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010f8:	e7f5      	b.n	1a0010e6 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0010fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010fe:	e7f2      	b.n	1a0010e6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001100:	ff6b3a10 	.word	0xff6b3a10
1a001104:	0b940510 	.word	0x0b940510
1a001108:	094c5eff 	.word	0x094c5eff

1a00110c <Chip_Clock_GetMainPLLHz>:
{
1a00110c:	b530      	push	{r4, r5, lr}
1a00110e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001110:	4d16      	ldr	r5, [pc, #88]	; (1a00116c <Chip_Clock_GetMainPLLHz+0x60>)
1a001112:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001114:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001118:	f7ff ff5c 	bl	1a000fd4 <Chip_Clock_GetClockInputHz>
1a00111c:	4684      	mov	ip, r0
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00111e:	4b14      	ldr	r3, [pc, #80]	; (1a001170 <Chip_Clock_GetMainPLLHz+0x64>)
1a001120:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001122:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a001124:	f010 0001 	ands.w	r0, r0, #1
1a001128:	d01d      	beq.n	1a001166 <Chip_Clock_GetMainPLLHz+0x5a>
	msel = (PLLReg >> 16) & 0xFF;
1a00112a:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00112e:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001132:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001136:	f3c4 1080 	ubfx	r0, r4, #6, #1
	m = msel + 1;
1a00113a:	3201      	adds	r2, #1
	n = nsel + 1;
1a00113c:	3301      	adds	r3, #1
	p = ptab[psel];
1a00113e:	3108      	adds	r1, #8
1a001140:	4469      	add	r1, sp
1a001142:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001146:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00114a:	d108      	bne.n	1a00115e <Chip_Clock_GetMainPLLHz+0x52>
1a00114c:	b938      	cbnz	r0, 1a00115e <Chip_Clock_GetMainPLLHz+0x52>
	return (m / (2 * p)) * (freq / n);
1a00114e:	0049      	lsls	r1, r1, #1
1a001150:	fbb2 f2f1 	udiv	r2, r2, r1
1a001154:	fbbc f0f3 	udiv	r0, ip, r3
1a001158:	fb02 f000 	mul.w	r0, r2, r0
1a00115c:	e003      	b.n	1a001166 <Chip_Clock_GetMainPLLHz+0x5a>
		return m * (freq / n);
1a00115e:	fbbc f3f3 	udiv	r3, ip, r3
1a001162:	fb02 f003 	mul.w	r0, r2, r3
}
1a001166:	b003      	add	sp, #12
1a001168:	bd30      	pop	{r4, r5, pc}
1a00116a:	bf00      	nop
1a00116c:	40050000 	.word	0x40050000
1a001170:	08040201 	.word	0x08040201

1a001174 <Chip_Clock_GetDivRate>:
{
1a001174:	b538      	push	{r3, r4, r5, lr}
1a001176:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001178:	4608      	mov	r0, r1
1a00117a:	f7ff ff0f 	bl	1a000f9c <Chip_Clock_GetDividerSource>
1a00117e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001180:	4620      	mov	r0, r4
1a001182:	f7ff ff19 	bl	1a000fb8 <Chip_Clock_GetDividerDivisor>
1a001186:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001188:	4628      	mov	r0, r5
1a00118a:	f7ff ff23 	bl	1a000fd4 <Chip_Clock_GetClockInputHz>
1a00118e:	3401      	adds	r4, #1
}
1a001190:	fbb0 f0f4 	udiv	r0, r0, r4
1a001194:	bd38      	pop	{r3, r4, r5, pc}
	...

1a001198 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001198:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00119a:	f100 0c16 	add.w	ip, r0, #22
1a00119e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
1a0011a2:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
1a0011a6:	f50c 2ca0 	add.w	ip, ip, #327680	; 0x50000
1a0011aa:	f8dc 4004 	ldr.w	r4, [ip, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0011ae:	281b      	cmp	r0, #27
1a0011b0:	d813      	bhi.n	1a0011da <Chip_Clock_SetBaseClock+0x42>
		if (Input != CLKINPUT_PD) {
1a0011b2:	2911      	cmp	r1, #17
1a0011b4:	d01a      	beq.n	1a0011ec <Chip_Clock_SetBaseClock+0x54>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0011b6:	4d0e      	ldr	r5, [pc, #56]	; (1a0011f0 <Chip_Clock_SetBaseClock+0x58>)
1a0011b8:	4025      	ands	r5, r4

			if (autoblocken) {
1a0011ba:	b10a      	cbz	r2, 1a0011c0 <Chip_Clock_SetBaseClock+0x28>
				reg |= (1 << 11);
1a0011bc:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0011c0:	b10b      	cbz	r3, 1a0011c6 <Chip_Clock_SetBaseClock+0x2e>
				reg |= (1 << 0);
1a0011c2:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0011c6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0011ca:	3016      	adds	r0, #22
1a0011cc:	0080      	lsls	r0, r0, #2
1a0011ce:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0011d2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0011d6:	6045      	str	r5, [r0, #4]
1a0011d8:	e008      	b.n	1a0011ec <Chip_Clock_SetBaseClock+0x54>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0011da:	f044 0401 	orr.w	r4, r4, #1
1a0011de:	3016      	adds	r0, #22
1a0011e0:	0080      	lsls	r0, r0, #2
1a0011e2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0011e6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0011ea:	6044      	str	r4, [r0, #4]
	}
}
1a0011ec:	bc30      	pop	{r4, r5}
1a0011ee:	4770      	bx	lr
1a0011f0:	e0fff7fe 	.word	0xe0fff7fe

1a0011f4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0011f4:	281b      	cmp	r0, #27
1a0011f6:	d80d      	bhi.n	1a001214 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0011f8:	f100 0316 	add.w	r3, r0, #22
1a0011fc:	009b      	lsls	r3, r3, #2
1a0011fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a001202:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
1a001206:	6858      	ldr	r0, [r3, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001208:	f010 0f01 	tst.w	r0, #1
1a00120c:	d104      	bne.n	1a001218 <Chip_Clock_GetBaseClock+0x24>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00120e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001212:	4770      	bx	lr
		return CLKINPUT_PD;
1a001214:	2011      	movs	r0, #17
1a001216:	4770      	bx	lr
		return CLKINPUT_PD;
1a001218:	2011      	movs	r0, #17
}
1a00121a:	4770      	bx	lr

1a00121c <Chip_Clock_GetBaseClocktHz>:
{
1a00121c:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00121e:	f7ff ffe9 	bl	1a0011f4 <Chip_Clock_GetBaseClock>
1a001222:	f7ff fed7 	bl	1a000fd4 <Chip_Clock_GetClockInputHz>
}
1a001226:	bd08      	pop	{r3, pc}

1a001228 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001228:	b971      	cbnz	r1, 1a001248 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a00122a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a00122c:	b10a      	cbz	r2, 1a001232 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00122e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001232:	2b02      	cmp	r3, #2
1a001234:	d00a      	beq.n	1a00124c <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001236:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00123a:	d30a      	bcc.n	1a001252 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00123c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001240:	4b06      	ldr	r3, [pc, #24]	; (1a00125c <Chip_Clock_EnableOpts+0x34>)
1a001242:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001246:	4770      	bx	lr
		reg |= (1 << 1);
1a001248:	2103      	movs	r1, #3
1a00124a:	e7ef      	b.n	1a00122c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00124c:	f041 0120 	orr.w	r1, r1, #32
1a001250:	e7f1      	b.n	1a001236 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001252:	3020      	adds	r0, #32
1a001254:	4b02      	ldr	r3, [pc, #8]	; (1a001260 <Chip_Clock_EnableOpts+0x38>)
1a001256:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00125a:	4770      	bx	lr
1a00125c:	40052000 	.word	0x40052000
1a001260:	40051000 	.word	0x40051000

1a001264 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001264:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001268:	d309      	bcc.n	1a00127e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00126a:	4a09      	ldr	r2, [pc, #36]	; (1a001290 <Chip_Clock_Enable+0x2c>)
1a00126c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001270:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001274:	f043 0301 	orr.w	r3, r3, #1
1a001278:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00127c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00127e:	4a05      	ldr	r2, [pc, #20]	; (1a001294 <Chip_Clock_Enable+0x30>)
1a001280:	3020      	adds	r0, #32
1a001282:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001286:	f043 0301 	orr.w	r3, r3, #1
1a00128a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00128e:	4770      	bx	lr
1a001290:	40052000 	.word	0x40052000
1a001294:	40051000 	.word	0x40051000

1a001298 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001298:	b510      	push	{r4, lr}
1a00129a:	4603      	mov	r3, r0
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00129c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0012a0:	d308      	bcc.n	1a0012b4 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0012a2:	f5a0 7291 	sub.w	r2, r0, #290	; 0x122
1a0012a6:	490d      	ldr	r1, [pc, #52]	; (1a0012dc <Chip_Clock_GetRate+0x44>)
1a0012a8:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0012ac:	f014 0001 	ands.w	r0, r4, #1
1a0012b0:	d106      	bne.n	1a0012c0 <Chip_Clock_GetRate+0x28>
	else {
		rate = 0;
	}

	return rate;
}
1a0012b2:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0012b4:	f100 0220 	add.w	r2, r0, #32
1a0012b8:	4909      	ldr	r1, [pc, #36]	; (1a0012e0 <Chip_Clock_GetRate+0x48>)
1a0012ba:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a0012be:	e7f5      	b.n	1a0012ac <Chip_Clock_GetRate+0x14>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0012c0:	4618      	mov	r0, r3
1a0012c2:	f7ff fe1b 	bl	1a000efc <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0012c6:	f7ff ffa9 	bl	1a00121c <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0012ca:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0012ce:	d103      	bne.n	1a0012d8 <Chip_Clock_GetRate+0x40>
			div = 1;
1a0012d0:	2301      	movs	r3, #1
		rate = rate / div;
1a0012d2:	fbb0 f0f3 	udiv	r0, r0, r3
	return rate;
1a0012d6:	e7ec      	b.n	1a0012b2 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0012d8:	2302      	movs	r3, #2
1a0012da:	e7fa      	b.n	1a0012d2 <Chip_Clock_GetRate+0x3a>
1a0012dc:	40052000 	.word	0x40052000
1a0012e0:	40051000 	.word	0x40051000

1a0012e4 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0012e4:	4770      	bx	lr
	...

1a0012e8 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0012e8:	2901      	cmp	r1, #1
1a0012ea:	d109      	bne.n	1a001300 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a0012ec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0012f0:	4b04      	ldr	r3, [pc, #16]	; (1a001304 <Chip_I2C_EventHandler+0x1c>)
1a0012f2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
1a0012f6:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0012f8:	7d13      	ldrb	r3, [r2, #20]
1a0012fa:	b2db      	uxtb	r3, r3
1a0012fc:	2b04      	cmp	r3, #4
1a0012fe:	d0fb      	beq.n	1a0012f8 <Chip_I2C_EventHandler+0x10>
}
1a001300:	4770      	bx	lr
1a001302:	bf00      	nop
1a001304:	10000000 	.word	0x10000000

1a001308 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001308:	b570      	push	{r4, r5, r6, lr}
1a00130a:	4604      	mov	r4, r0
	Chip_Clock_Enable(i2c[id].clk);
1a00130c:	4e07      	ldr	r6, [pc, #28]	; (1a00132c <Chip_I2C_Init+0x24>)
1a00130e:	00c5      	lsls	r5, r0, #3
1a001310:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001314:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a001318:	8898      	ldrh	r0, [r3, #4]
1a00131a:	f7ff ffa3 	bl	1a001264 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a00131e:	1b2d      	subs	r5, r5, r4
1a001320:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001324:	226c      	movs	r2, #108	; 0x6c
1a001326:	619a      	str	r2, [r3, #24]
}
1a001328:	bd70      	pop	{r4, r5, r6, pc}
1a00132a:	bf00      	nop
1a00132c:	10000000 	.word	0x10000000

1a001330 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001334:	4604      	mov	r4, r0
1a001336:	4688      	mov	r8, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a001338:	4d0b      	ldr	r5, [pc, #44]	; (1a001368 <Chip_I2C_SetClockRate+0x38>)
1a00133a:	00c6      	lsls	r6, r0, #3
1a00133c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001340:	009f      	lsls	r7, r3, #2
1a001342:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1a001346:	8898      	ldrh	r0, [r3, #4]
1a001348:	f7ff ffa6 	bl	1a001298 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00134c:	fbb0 f1f8 	udiv	r1, r0, r8
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001350:	59eb      	ldr	r3, [r5, r7]
1a001352:	084a      	lsrs	r2, r1, #1
1a001354:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a001356:	1b36      	subs	r6, r6, r4
1a001358:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
1a00135c:	691a      	ldr	r2, [r3, #16]
1a00135e:	1a89      	subs	r1, r1, r2
1a001360:	6159      	str	r1, [r3, #20]
}
1a001362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001366:	bf00      	nop
1a001368:	10000000 	.word	0x10000000

1a00136c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00136c:	4b03      	ldr	r3, [pc, #12]	; (1a00137c <Chip_SSP_GetClockIndex+0x10>)
1a00136e:	4298      	cmp	r0, r3
1a001370:	d001      	beq.n	1a001376 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001372:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001374:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001376:	20a5      	movs	r0, #165	; 0xa5
1a001378:	4770      	bx	lr
1a00137a:	bf00      	nop
1a00137c:	400c5000 	.word	0x400c5000

1a001380 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001380:	4b04      	ldr	r3, [pc, #16]	; (1a001394 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001382:	4298      	cmp	r0, r3
1a001384:	d002      	beq.n	1a00138c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001386:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00138a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00138c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001390:	4770      	bx	lr
1a001392:	bf00      	nop
1a001394:	400c5000 	.word	0x400c5000

1a001398 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001398:	6803      	ldr	r3, [r0, #0]
1a00139a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00139e:	0209      	lsls	r1, r1, #8
1a0013a0:	b289      	uxth	r1, r1
1a0013a2:	4319      	orrs	r1, r3
1a0013a4:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0013a6:	6102      	str	r2, [r0, #16]
}
1a0013a8:	4770      	bx	lr

1a0013aa <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0013aa:	b538      	push	{r3, r4, r5, lr}
1a0013ac:	4605      	mov	r5, r0
1a0013ae:	460c      	mov	r4, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0013b0:	f7ff ffe6 	bl	1a001380 <Chip_SSP_GetPeriphClockIndex>
1a0013b4:	f7ff ff70 	bl	1a001298 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0013b8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0013ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0013be:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0013c0:	e000      	b.n	1a0013c4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0013c2:	4661      	mov	r1, ip
	while (cmp_clk > bitRate) {
1a0013c4:	42a3      	cmp	r3, r4
1a0013c6:	d90d      	bls.n	1a0013e4 <Chip_SSP_SetBitRate+0x3a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0013c8:	f101 0c01 	add.w	ip, r1, #1
1a0013cc:	fb01 2302 	mla	r3, r1, r2, r2
1a0013d0:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0013d4:	429c      	cmp	r4, r3
1a0013d6:	d2f5      	bcs.n	1a0013c4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0013d8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
1a0013dc:	d9f1      	bls.n	1a0013c2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0013de:	3202      	adds	r2, #2
				cr0_div = 0;
1a0013e0:	2100      	movs	r1, #0
1a0013e2:	e7ef      	b.n	1a0013c4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0013e4:	4628      	mov	r0, r5
1a0013e6:	f7ff ffd7 	bl	1a001398 <Chip_SSP_SetClockRate>
}
1a0013ea:	bd38      	pop	{r3, r4, r5, pc}

1a0013ec <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0013ec:	b510      	push	{r4, lr}
1a0013ee:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0013f0:	f7ff ffbc 	bl	1a00136c <Chip_SSP_GetClockIndex>
1a0013f4:	f7ff ff36 	bl	1a001264 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0013f8:	4620      	mov	r0, r4
1a0013fa:	f7ff ffc1 	bl	1a001380 <Chip_SSP_GetPeriphClockIndex>
1a0013fe:	f7ff ff31 	bl	1a001264 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001402:	6863      	ldr	r3, [r4, #4]
1a001404:	f023 0304 	bic.w	r3, r3, #4
1a001408:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00140a:	6823      	ldr	r3, [r4, #0]
1a00140c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001410:	f043 0307 	orr.w	r3, r3, #7
1a001414:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001416:	4902      	ldr	r1, [pc, #8]	; (1a001420 <Chip_SSP_Init+0x34>)
1a001418:	4620      	mov	r0, r4
1a00141a:	f7ff ffc6 	bl	1a0013aa <Chip_SSP_SetBitRate>
}
1a00141e:	bd10      	pop	{r4, pc}
1a001420:	000186a0 	.word	0x000186a0

1a001424 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001424:	b570      	push	{r4, r5, r6, lr}
1a001426:	b08a      	sub	sp, #40	; 0x28
1a001428:	4605      	mov	r5, r0
1a00142a:	460e      	mov	r6, r1
1a00142c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00142e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001432:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001434:	2806      	cmp	r0, #6
1a001436:	d018      	beq.n	1a00146a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001438:	2300      	movs	r3, #0
1a00143a:	2201      	movs	r2, #1
1a00143c:	4629      	mov	r1, r5
1a00143e:	2004      	movs	r0, #4
1a001440:	f7ff feaa 	bl	1a001198 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001444:	4a4a      	ldr	r2, [pc, #296]	; (1a001570 <Chip_SetupCoreClock+0x14c>)
1a001446:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001448:	f043 0301 	orr.w	r3, r3, #1
1a00144c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00144e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001452:	a901      	add	r1, sp, #4
1a001454:	4630      	mov	r0, r6
1a001456:	f7ff fe19 	bl	1a00108c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00145a:	4b46      	ldr	r3, [pc, #280]	; (1a001574 <Chip_SetupCoreClock+0x150>)
1a00145c:	429e      	cmp	r6, r3
1a00145e:	d916      	bls.n	1a00148e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001460:	9b01      	ldr	r3, [sp, #4]
1a001462:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001466:	d003      	beq.n	1a001470 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001468:	e7fe      	b.n	1a001468 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00146a:	f7ff fd71 	bl	1a000f50 <Chip_Clock_EnableCrystal>
1a00146e:	e7e3      	b.n	1a001438 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001470:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001474:	d005      	beq.n	1a001482 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00147a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a00147c:	2600      	movs	r6, #0
			direct = 1;
1a00147e:	2501      	movs	r5, #1
1a001480:	e007      	b.n	1a001492 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001482:	9b04      	ldr	r3, [sp, #16]
1a001484:	3301      	adds	r3, #1
1a001486:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001488:	2601      	movs	r6, #1
	uint32_t direct = 0, pdivide = 0;
1a00148a:	2500      	movs	r5, #0
1a00148c:	e001      	b.n	1a001492 <Chip_SetupCoreClock+0x6e>
1a00148e:	2600      	movs	r6, #0
1a001490:	4635      	mov	r5, r6
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001492:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001496:	9b01      	ldr	r3, [sp, #4]
1a001498:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00149c:	9a05      	ldr	r2, [sp, #20]
1a00149e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0014a2:	9a03      	ldr	r2, [sp, #12]
1a0014a4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0014a8:	9a04      	ldr	r2, [sp, #16]
1a0014aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0014ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0014b2:	4a2f      	ldr	r2, [pc, #188]	; (1a001570 <Chip_SetupCoreClock+0x14c>)
1a0014b4:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0014b6:	4b2e      	ldr	r3, [pc, #184]	; (1a001570 <Chip_SetupCoreClock+0x14c>)
1a0014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0014ba:	f013 0f01 	tst.w	r3, #1
1a0014be:	d0fa      	beq.n	1a0014b6 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0014c0:	2300      	movs	r3, #0
1a0014c2:	2201      	movs	r2, #1
1a0014c4:	2109      	movs	r1, #9
1a0014c6:	2004      	movs	r0, #4
1a0014c8:	f7ff fe66 	bl	1a001198 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0014cc:	b305      	cbz	r5, 1a001510 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0014ce:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0014d2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0014d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0014d6:	1e5a      	subs	r2, r3, #1
1a0014d8:	9209      	str	r2, [sp, #36]	; 0x24
1a0014da:	2b00      	cmp	r3, #0
1a0014dc:	d1fa      	bne.n	1a0014d4 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0014de:	9b01      	ldr	r3, [sp, #4]
1a0014e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0014e4:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0014e6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0014ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0014ee:	9a05      	ldr	r2, [sp, #20]
1a0014f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0014f4:	9a03      	ldr	r2, [sp, #12]
1a0014f6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0014fa:	9a04      	ldr	r2, [sp, #16]
1a0014fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001504:	4a1a      	ldr	r2, [pc, #104]	; (1a001570 <Chip_SetupCoreClock+0x14c>)
1a001506:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001508:	2c00      	cmp	r4, #0
1a00150a:	d12e      	bne.n	1a00156a <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00150c:	b00a      	add	sp, #40	; 0x28
1a00150e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001510:	2e00      	cmp	r6, #0
1a001512:	d0f9      	beq.n	1a001508 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001514:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001518:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00151a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00151c:	1e5a      	subs	r2, r3, #1
1a00151e:	9209      	str	r2, [sp, #36]	; 0x24
1a001520:	2b00      	cmp	r3, #0
1a001522:	d1fa      	bne.n	1a00151a <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001524:	9a04      	ldr	r2, [sp, #16]
1a001526:	3a01      	subs	r2, #1
1a001528:	9204      	str	r2, [sp, #16]
1a00152a:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00152e:	9b01      	ldr	r3, [sp, #4]
1a001530:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001534:	9905      	ldr	r1, [sp, #20]
1a001536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00153a:	9903      	ldr	r1, [sp, #12]
1a00153c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001540:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001544:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001548:	4a09      	ldr	r2, [pc, #36]	; (1a001570 <Chip_SetupCoreClock+0x14c>)
1a00154a:	6453      	str	r3, [r2, #68]	; 0x44
}
1a00154c:	e7dc      	b.n	1a001508 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00154e:	480a      	ldr	r0, [pc, #40]	; (1a001578 <Chip_SetupCoreClock+0x154>)
1a001550:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001554:	78cb      	ldrb	r3, [r1, #3]
1a001556:	788a      	ldrb	r2, [r1, #2]
1a001558:	7849      	ldrb	r1, [r1, #1]
1a00155a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00155e:	f7ff fe1b 	bl	1a001198 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001562:	3401      	adds	r4, #1
1a001564:	2c11      	cmp	r4, #17
1a001566:	d9f2      	bls.n	1a00154e <Chip_SetupCoreClock+0x12a>
1a001568:	e7d0      	b.n	1a00150c <Chip_SetupCoreClock+0xe8>
1a00156a:	2400      	movs	r4, #0
1a00156c:	e7fa      	b.n	1a001564 <Chip_SetupCoreClock+0x140>
1a00156e:	bf00      	nop
1a001570:	40050000 	.word	0x40050000
1a001574:	068e7780 	.word	0x068e7780
1a001578:	1a001f70 	.word	0x1a001f70

1a00157c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a00157c:	4b09      	ldr	r3, [pc, #36]	; (1a0015a4 <Chip_UART_GetIndex+0x28>)
1a00157e:	4298      	cmp	r0, r3
1a001580:	d00b      	beq.n	1a00159a <Chip_UART_GetIndex+0x1e>
1a001582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001586:	4298      	cmp	r0, r3
1a001588:	d009      	beq.n	1a00159e <Chip_UART_GetIndex+0x22>
1a00158a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00158e:	4298      	cmp	r0, r3
1a001590:	d001      	beq.n	1a001596 <Chip_UART_GetIndex+0x1a>
1a001592:	2000      	movs	r0, #0
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a001594:	4770      	bx	lr
			return 1;
1a001596:	2001      	movs	r0, #1
1a001598:	4770      	bx	lr
			return 2;
1a00159a:	2002      	movs	r0, #2
1a00159c:	4770      	bx	lr
			return 3;
1a00159e:	2003      	movs	r0, #3
1a0015a0:	4770      	bx	lr
1a0015a2:	bf00      	nop
1a0015a4:	400c1000 	.word	0x400c1000

1a0015a8 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0015a8:	b530      	push	{r4, r5, lr}
1a0015aa:	b083      	sub	sp, #12
1a0015ac:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0015ae:	f7ff ffe5 	bl	1a00157c <Chip_UART_GetIndex>
1a0015b2:	2301      	movs	r3, #1
1a0015b4:	461a      	mov	r2, r3
1a0015b6:	4619      	mov	r1, r3
1a0015b8:	4d0e      	ldr	r5, [pc, #56]	; (1a0015f4 <Chip_UART_Init+0x4c>)
1a0015ba:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0015be:	f7ff fe33 	bl	1a001228 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0015c2:	2307      	movs	r3, #7
1a0015c4:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0015c6:	2300      	movs	r3, #0
1a0015c8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0015ca:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0015cc:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0015ce:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0015d0:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0015d2:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0015d4:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0015d6:	4b08      	ldr	r3, [pc, #32]	; (1a0015f8 <Chip_UART_Init+0x50>)
1a0015d8:	429c      	cmp	r4, r3
1a0015da:	d006      	beq.n	1a0015ea <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0015dc:	2303      	movs	r3, #3
1a0015de:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0015e0:	2310      	movs	r3, #16
1a0015e2:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0015e4:	9b01      	ldr	r3, [sp, #4]
}
1a0015e6:	b003      	add	sp, #12
1a0015e8:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0015ea:	2300      	movs	r3, #0
1a0015ec:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0015ee:	69a3      	ldr	r3, [r4, #24]
1a0015f0:	9301      	str	r3, [sp, #4]
1a0015f2:	e7f3      	b.n	1a0015dc <Chip_UART_Init+0x34>
1a0015f4:	1a001fc0 	.word	0x1a001fc0
1a0015f8:	40082000 	.word	0x40082000

1a0015fc <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001600:	b083      	sub	sp, #12
1a001602:	9001      	str	r0, [sp, #4]
1a001604:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001606:	f7ff ffb9 	bl	1a00157c <Chip_UART_GetIndex>
1a00160a:	4b32      	ldr	r3, [pc, #200]	; (1a0016d4 <Chip_UART_SetBaudFDR+0xd8>)
1a00160c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001610:	f7ff fe42 	bl	1a001298 <Chip_Clock_GetRate>
1a001614:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a001616:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00161a:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00161c:	f04f 0b00 	mov.w	fp, #0
1a001620:	46a2      	mov	sl, r4
1a001622:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001624:	e02a      	b.n	1a00167c <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a001626:	4242      	negs	r2, r0
				div ++;
1a001628:	1c4b      	adds	r3, r1, #1
1a00162a:	e017      	b.n	1a00165c <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a00162c:	b30a      	cbz	r2, 1a001672 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00162e:	4617      	mov	r7, r2
			sd = d;
1a001630:	46ab      	mov	fp, r5
			sm = m;
1a001632:	46a2      	mov	sl, r4
			sdiv = div;
1a001634:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a001636:	3501      	adds	r5, #1
1a001638:	42ac      	cmp	r4, r5
1a00163a:	d91e      	bls.n	1a00167a <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00163c:	0931      	lsrs	r1, r6, #4
1a00163e:	0730      	lsls	r0, r6, #28
1a001640:	fba4 0c00 	umull	r0, ip, r4, r0
1a001644:	1962      	adds	r2, r4, r5
1a001646:	fb08 f202 	mul.w	r2, r8, r2
1a00164a:	2300      	movs	r3, #0
1a00164c:	fb04 c101 	mla	r1, r4, r1, ip
1a001650:	f000 fa7c 	bl	1a001b4c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001654:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a001656:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001658:	2800      	cmp	r0, #0
1a00165a:	dbe4      	blt.n	1a001626 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00165c:	4297      	cmp	r7, r2
1a00165e:	d3ea      	bcc.n	1a001636 <Chip_UART_SetBaudFDR+0x3a>
1a001660:	2b00      	cmp	r3, #0
1a001662:	d0e8      	beq.n	1a001636 <Chip_UART_SetBaudFDR+0x3a>
1a001664:	0c19      	lsrs	r1, r3, #16
1a001666:	d1e6      	bne.n	1a001636 <Chip_UART_SetBaudFDR+0x3a>
1a001668:	2b02      	cmp	r3, #2
1a00166a:	d8df      	bhi.n	1a00162c <Chip_UART_SetBaudFDR+0x30>
1a00166c:	2d00      	cmp	r5, #0
1a00166e:	d0dd      	beq.n	1a00162c <Chip_UART_SetBaudFDR+0x30>
1a001670:	e7e1      	b.n	1a001636 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a001672:	4617      	mov	r7, r2
			sd = d;
1a001674:	46ab      	mov	fp, r5
			sm = m;
1a001676:	46a2      	mov	sl, r4
			sdiv = div;
1a001678:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00167a:	3401      	adds	r4, #1
1a00167c:	b11f      	cbz	r7, 1a001686 <Chip_UART_SetBaudFDR+0x8a>
1a00167e:	2c0f      	cmp	r4, #15
1a001680:	d801      	bhi.n	1a001686 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a001682:	2500      	movs	r5, #0
1a001684:	e7d8      	b.n	1a001638 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001686:	f1b9 0f00 	cmp.w	r9, #0
1a00168a:	d01e      	beq.n	1a0016ca <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00168c:	9901      	ldr	r1, [sp, #4]
1a00168e:	68cb      	ldr	r3, [r1, #12]
1a001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001694:	60cb      	str	r3, [r1, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001696:	fa5f f389 	uxtb.w	r3, r9
1a00169a:	600b      	str	r3, [r1, #0]
	pUART->DLM = (uint32_t) dlm;
1a00169c:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0016a0:	604b      	str	r3, [r1, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0016a2:	68cb      	ldr	r3, [r1, #12]
1a0016a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0016a8:	60cb      	str	r3, [r1, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0016aa:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0016ae:	b2db      	uxtb	r3, r3
1a0016b0:	f00b 020f 	and.w	r2, fp, #15
1a0016b4:	4313      	orrs	r3, r2
1a0016b6:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0016b8:	0933      	lsrs	r3, r6, #4
1a0016ba:	fb0a f303 	mul.w	r3, sl, r3
1a0016be:	eb0a 020b 	add.w	r2, sl, fp
1a0016c2:	fb09 f202 	mul.w	r2, r9, r2
1a0016c6:	fbb3 f9f2 	udiv	r9, r3, r2
}
1a0016ca:	4648      	mov	r0, r9
1a0016cc:	b003      	add	sp, #12
1a0016ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0016d2:	bf00      	nop
1a0016d4:	1a001fb8 	.word	0x1a001fb8

1a0016d8 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0016d8:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0016da:	4a0b      	ldr	r2, [pc, #44]	; (1a001708 <SystemInit+0x30>)
1a0016dc:	4b0b      	ldr	r3, [pc, #44]	; (1a00170c <SystemInit+0x34>)
1a0016de:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0016e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
1a0016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0016e6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0016ea:	2b20      	cmp	r3, #32
1a0016ec:	d004      	beq.n	1a0016f8 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a0016ee:	f7ff fab5 	bl	1a000c5c <Board_SystemInit>
   Board_Init();
1a0016f2:	f7ff fa4b 	bl	1a000b8c <Board_Init>
#endif
}
1a0016f6:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0016f8:	4a04      	ldr	r2, [pc, #16]	; (1a00170c <SystemInit+0x34>)
1a0016fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0016fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001702:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001706:	e7f2      	b.n	1a0016ee <SystemInit+0x16>
1a001708:	1a000000 	.word	0x1a000000
1a00170c:	e000ed00 	.word	0xe000ed00

1a001710 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001710:	4b04      	ldr	r3, [pc, #16]	; (1a001724 <cyclesCounterInit+0x14>)
1a001712:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001714:	4a04      	ldr	r2, [pc, #16]	; (1a001728 <cyclesCounterInit+0x18>)
1a001716:	6813      	ldr	r3, [r2, #0]
1a001718:	f043 0301 	orr.w	r3, r3, #1
1a00171c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00171e:	2001      	movs	r0, #1
1a001720:	4770      	bx	lr
1a001722:	bf00      	nop
1a001724:	10000038 	.word	0x10000038
1a001728:	e0001000 	.word	0xe0001000

1a00172c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00172c:	b410      	push	{r4}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00172e:	4c0c      	ldr	r4, [pc, #48]	; (1a001760 <gpioObtainPinInit+0x34>)
1a001730:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001734:	eb04 0c00 	add.w	ip, r4, r0
1a001738:	5620      	ldrsb	r0, [r4, r0]
1a00173a:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00173c:	f99c 1001 	ldrsb.w	r1, [ip, #1]
1a001740:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001742:	f99c 2002 	ldrsb.w	r2, [ip, #2]
1a001746:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001748:	f99c 2003 	ldrsb.w	r2, [ip, #3]
1a00174c:	9b01      	ldr	r3, [sp, #4]
1a00174e:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001750:	f99c 2004 	ldrsb.w	r2, [ip, #4]
1a001754:	9b02      	ldr	r3, [sp, #8]
1a001756:	701a      	strb	r2, [r3, #0]
}
1a001758:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00175c:	4770      	bx	lr
1a00175e:	bf00      	nop
1a001760:	1a001fc8 	.word	0x1a001fc8

1a001764 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001764:	f110 0f02 	cmn.w	r0, #2
1a001768:	f000 80c6 	beq.w	1a0018f8 <gpioInit+0x194>
{
1a00176c:	b530      	push	{r4, r5, lr}
1a00176e:	b085      	sub	sp, #20
1a001770:	460c      	mov	r4, r1
	  return FALSE;
   }
   if( pin == GND ){
1a001772:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001776:	f000 80c1 	beq.w	1a0018fc <gpioInit+0x198>
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00177a:	2300      	movs	r3, #0
1a00177c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001780:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001784:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001788:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00178c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001790:	f10d 030b 	add.w	r3, sp, #11
1a001794:	9301      	str	r3, [sp, #4]
1a001796:	ab03      	add	r3, sp, #12
1a001798:	9300      	str	r3, [sp, #0]
1a00179a:	f10d 030d 	add.w	r3, sp, #13
1a00179e:	f10d 020e 	add.w	r2, sp, #14
1a0017a2:	f10d 010f 	add.w	r1, sp, #15
1a0017a6:	f7ff ffc1 	bl	1a00172c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0017aa:	2c05      	cmp	r4, #5
1a0017ac:	f200 80a9 	bhi.w	1a001902 <gpioInit+0x19e>
1a0017b0:	e8df f004 	tbb	[pc, r4]
1a0017b4:	44268008 	.word	0x44268008
1a0017b8:	0362      	.short	0x0362

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0017ba:	4853      	ldr	r0, [pc, #332]	; (1a001908 <gpioInit+0x1a4>)
1a0017bc:	f7ff fd92 	bl	1a0012e4 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0017c0:	2001      	movs	r0, #1
      break;
1a0017c2:	e09c      	b.n	1a0018fe <gpioInit+0x19a>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a0017c4:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0017c8:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0017cc:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0017d0:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0017d4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0017d8:	494c      	ldr	r1, [pc, #304]	; (1a00190c <gpioInit+0x1a8>)
1a0017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0017de:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0017e2:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a0017e6:	2001      	movs	r0, #1
1a0017e8:	fa00 f101 	lsl.w	r1, r0, r1
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0017ec:	4c46      	ldr	r4, [pc, #280]	; (1a001908 <gpioInit+0x1a4>)
1a0017ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0017f2:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0017f6:	ea22 0201 	bic.w	r2, r2, r1
1a0017fa:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0017fe:	e07e      	b.n	1a0018fe <gpioInit+0x19a>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a001800:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001804:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001808:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00180c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001810:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001814:	493d      	ldr	r1, [pc, #244]	; (1a00190c <gpioInit+0x1a8>)
1a001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00181a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00181e:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a001822:	2001      	movs	r0, #1
1a001824:	fa00 f101 	lsl.w	r1, r0, r1
1a001828:	4c37      	ldr	r4, [pc, #220]	; (1a001908 <gpioInit+0x1a4>)
1a00182a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00182e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001832:	ea22 0201 	bic.w	r2, r2, r1
1a001836:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00183a:	e060      	b.n	1a0018fe <gpioInit+0x19a>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a00183c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001840:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001844:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001848:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00184c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001850:	492e      	ldr	r1, [pc, #184]	; (1a00190c <gpioInit+0x1a8>)
1a001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001856:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00185a:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a00185e:	2001      	movs	r0, #1
1a001860:	fa00 f101 	lsl.w	r1, r0, r1
1a001864:	4c28      	ldr	r4, [pc, #160]	; (1a001908 <gpioInit+0x1a4>)
1a001866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00186a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00186e:	ea22 0201 	bic.w	r2, r2, r1
1a001872:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001876:	e042      	b.n	1a0018fe <gpioInit+0x19a>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a001878:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00187c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001880:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001884:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001888:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00188c:	491f      	ldr	r1, [pc, #124]	; (1a00190c <gpioInit+0x1a8>)
1a00188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001892:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001896:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a00189a:	2001      	movs	r0, #1
1a00189c:	fa00 f101 	lsl.w	r1, r0, r1
1a0018a0:	4c19      	ldr	r4, [pc, #100]	; (1a001908 <gpioInit+0x1a4>)
1a0018a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0018a6:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0018aa:	ea22 0201 	bic.w	r2, r2, r1
1a0018ae:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0018b2:	e024      	b.n	1a0018fe <gpioInit+0x19a>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a0018b4:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0018b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0018bc:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0018c0:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0018c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0018c8:	4910      	ldr	r1, [pc, #64]	; (1a00190c <gpioInit+0x1a8>)
1a0018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0018ce:	f89d 000c 	ldrb.w	r0, [sp, #12]
1a0018d2:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a0018d6:	2201      	movs	r2, #1
1a0018d8:	408a      	lsls	r2, r1
		pGPIO->DIR[portNum] |= bitValue;
1a0018da:	4b0b      	ldr	r3, [pc, #44]	; (1a001908 <gpioInit+0x1a4>)
1a0018dc:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
1a0018e0:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
1a0018e4:	432a      	orrs	r2, r5
1a0018e6:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0018ea:	b2c9      	uxtb	r1, r1
	pGPIO->B[port][pin] = setting;
1a0018ec:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0018f0:	2200      	movs	r2, #0
1a0018f2:	545a      	strb	r2, [r3, r1]
   bool_t ret_val     = 1;
1a0018f4:	4620      	mov	r0, r4
}
1a0018f6:	e002      	b.n	1a0018fe <gpioInit+0x19a>
	  return FALSE;
1a0018f8:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a0018fa:	4770      	bx	lr
	  return FALSE;
1a0018fc:	2000      	movs	r0, #0
}
1a0018fe:	b005      	add	sp, #20
1a001900:	bd30      	pop	{r4, r5, pc}
   switch(config) {
1a001902:	2000      	movs	r0, #0
1a001904:	e7fb      	b.n	1a0018fe <gpioInit+0x19a>
1a001906:	bf00      	nop
1a001908:	400f4000 	.word	0x400f4000
1a00190c:	40086000 	.word	0x40086000

1a001910 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001910:	f110 0f02 	cmn.w	r0, #2
1a001914:	d02d      	beq.n	1a001972 <gpioWrite+0x62>
{
1a001916:	b510      	push	{r4, lr}
1a001918:	b084      	sub	sp, #16
1a00191a:	460c      	mov	r4, r1
	  return FALSE;
   }
   if( pin == GND ){
1a00191c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001920:	d029      	beq.n	1a001976 <gpioWrite+0x66>
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001922:	2300      	movs	r3, #0
1a001924:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001928:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00192c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001930:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001934:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001938:	f10d 030b 	add.w	r3, sp, #11
1a00193c:	9301      	str	r3, [sp, #4]
1a00193e:	ab03      	add	r3, sp, #12
1a001940:	9300      	str	r3, [sp, #0]
1a001942:	f10d 030d 	add.w	r3, sp, #13
1a001946:	f10d 020e 	add.w	r2, sp, #14
1a00194a:	f10d 010f 	add.w	r1, sp, #15
1a00194e:	f7ff feed 	bl	1a00172c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001952:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001956:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00195a:	1e21      	subs	r1, r4, #0
1a00195c:	bf18      	it	ne
1a00195e:	2101      	movne	r1, #1
	pGPIO->B[port][pin] = setting;
1a001960:	015b      	lsls	r3, r3, #5
1a001962:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001966:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00196a:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a00196c:	2001      	movs	r0, #1
}
1a00196e:	b004      	add	sp, #16
1a001970:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001972:	2000      	movs	r0, #0
}
1a001974:	4770      	bx	lr
	  return FALSE;
1a001976:	2000      	movs	r0, #0
1a001978:	e7f9      	b.n	1a00196e <gpioWrite+0x5e>

1a00197a <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00197a:	f110 0f02 	cmn.w	r0, #2
1a00197e:	d02c      	beq.n	1a0019da <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a001980:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001984:	d02b      	beq.n	1a0019de <gpioRead+0x64>
{
1a001986:	b500      	push	{lr}
1a001988:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00198a:	2300      	movs	r3, #0
1a00198c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001990:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001994:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001998:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00199c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0019a0:	f10d 030b 	add.w	r3, sp, #11
1a0019a4:	9301      	str	r3, [sp, #4]
1a0019a6:	ab03      	add	r3, sp, #12
1a0019a8:	9300      	str	r3, [sp, #0]
1a0019aa:	f10d 030d 	add.w	r3, sp, #13
1a0019ae:	f10d 020e 	add.w	r2, sp, #14
1a0019b2:	f10d 010f 	add.w	r1, sp, #15
1a0019b6:	f7ff feb9 	bl	1a00172c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0019ba:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0019be:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0019c2:	015b      	lsls	r3, r3, #5
1a0019c4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0019c8:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0019cc:	5c98      	ldrb	r0, [r3, r2]
1a0019ce:	3800      	subs	r0, #0
1a0019d0:	bf18      	it	ne
1a0019d2:	2001      	movne	r0, #1

   return ret_val;
}
1a0019d4:	b005      	add	sp, #20
1a0019d6:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0019da:	2001      	movs	r0, #1
1a0019dc:	4770      	bx	lr
      return FALSE;
1a0019de:	2000      	movs	r0, #0
}
1a0019e0:	4770      	bx	lr
	...

1a0019e4 <tickCallbackSet>:
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t retVal = TRUE;
      if( tickCallback != NULL ) {
1a0019e4:	b130      	cbz	r0, 1a0019f4 <tickCallbackSet+0x10>
         tickHookFunction = tickCallback;
1a0019e6:	4a05      	ldr	r2, [pc, #20]	; (1a0019fc <tickCallbackSet+0x18>)
1a0019e8:	6010      	str	r0, [r2, #0]
      bool_t retVal = TRUE;
1a0019ea:	2001      	movs	r0, #1
      } else {
         retVal = FALSE;
      }
      if( tickCallbackParams != NULL ) {
1a0019ec:	b121      	cbz	r1, 1a0019f8 <tickCallbackSet+0x14>
         callBackFuncParams = tickCallbackParams;
1a0019ee:	4b04      	ldr	r3, [pc, #16]	; (1a001a00 <tickCallbackSet+0x1c>)
1a0019f0:	6019      	str	r1, [r3, #0]
1a0019f2:	4770      	bx	lr
         retVal = FALSE;
1a0019f4:	2000      	movs	r0, #0
1a0019f6:	e7f9      	b.n	1a0019ec <tickCallbackSet+0x8>
      } else {
         retVal &= FALSE;
1a0019f8:	2000      	movs	r0, #0
      }
      return retVal;
   #endif
}
1a0019fa:	4770      	bx	lr
1a0019fc:	100000b8 	.word	0x100000b8
1a001a00:	100000a8 	.word	0x100000a8

1a001a04 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001a04:	b120      	cbz	r0, 1a001a10 <tickPowerSet+0xc>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001a06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
1a001a0a:	2207      	movs	r2, #7
1a001a0c:	611a      	str	r2, [r3, #16]
1a001a0e:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001a10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
1a001a14:	2200      	movs	r2, #0
1a001a16:	611a      	str	r2, [r3, #16]
      }
   #endif
}
1a001a18:	4770      	bx	lr
	...

1a001a1c <tickInit>:
{
1a001a1c:	b510      	push	{r4, lr}
      if( tickRateMSvalue == 0 ) {
1a001a1e:	ea50 0301 	orrs.w	r3, r0, r1
1a001a22:	d028      	beq.n	1a001a76 <tickInit+0x5a>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001a24:	1e42      	subs	r2, r0, #1
1a001a26:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001a2a:	2a32      	cmp	r2, #50	; 0x32
1a001a2c:	f173 0300 	sbcs.w	r3, r3, #0
1a001a30:	d226      	bcs.n	1a001a80 <tickInit+0x64>
            tickRateMS = tickRateMSvalue;
1a001a32:	4b14      	ldr	r3, [pc, #80]	; (1a001a84 <tickInit+0x68>)
1a001a34:	6018      	str	r0, [r3, #0]
1a001a36:	6059      	str	r1, [r3, #4]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001a38:	4b13      	ldr	r3, [pc, #76]	; (1a001a88 <tickInit+0x6c>)
1a001a3a:	681c      	ldr	r4, [r3, #0]
1a001a3c:	fba4 0c00 	umull	r0, ip, r4, r0
1a001a40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001a44:	2300      	movs	r3, #0
1a001a46:	fb04 c101 	mla	r1, r4, r1, ip
1a001a4a:	f000 f87f 	bl	1a001b4c <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001a4e:	3801      	subs	r0, #1
1a001a50:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001a54:	d20a      	bcs.n	1a001a6c <tickInit+0x50>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001a56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
1a001a5a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001a5c:	4a0b      	ldr	r2, [pc, #44]	; (1a001a8c <tickInit+0x70>)
1a001a5e:	21e0      	movs	r1, #224	; 0xe0
1a001a60:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001a64:	2200      	movs	r2, #0
1a001a66:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001a68:	2207      	movs	r2, #7
1a001a6a:	611a      	str	r2, [r3, #16]
            tickPowerSet( ON );
1a001a6c:	2001      	movs	r0, #1
1a001a6e:	f7ff ffc9 	bl	1a001a04 <tickPowerSet>
      bool_t ret_val = 1;
1a001a72:	2001      	movs	r0, #1
}
1a001a74:	bd10      	pop	{r4, pc}
         tickPowerSet( OFF );
1a001a76:	2000      	movs	r0, #0
1a001a78:	f7ff ffc4 	bl	1a001a04 <tickPowerSet>
         ret_val = 0;
1a001a7c:	2000      	movs	r0, #0
1a001a7e:	e7f9      	b.n	1a001a74 <tickInit+0x58>
            ret_val = 0;
1a001a80:	2000      	movs	r0, #0
1a001a82:	e7f7      	b.n	1a001a74 <tickInit+0x58>
1a001a84:	10000040 	.word	0x10000040
1a001a88:	1000009c 	.word	0x1000009c
1a001a8c:	e000ed00 	.word	0xe000ed00

1a001a90 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001a90:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001a92:	4a07      	ldr	r2, [pc, #28]	; (1a001ab0 <SysTick_Handler+0x20>)
1a001a94:	6813      	ldr	r3, [r2, #0]
1a001a96:	6851      	ldr	r1, [r2, #4]
1a001a98:	3301      	adds	r3, #1
1a001a9a:	f141 0100 	adc.w	r1, r1, #0
1a001a9e:	6013      	str	r3, [r2, #0]
1a001aa0:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001aa2:	4b04      	ldr	r3, [pc, #16]	; (1a001ab4 <SysTick_Handler+0x24>)
1a001aa4:	681b      	ldr	r3, [r3, #0]
1a001aa6:	b113      	cbz	r3, 1a001aae <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a001aa8:	4a03      	ldr	r2, [pc, #12]	; (1a001ab8 <SysTick_Handler+0x28>)
1a001aaa:	6810      	ldr	r0, [r2, #0]
1a001aac:	4798      	blx	r3
   }
}
1a001aae:	bd08      	pop	{r3, pc}
1a001ab0:	100000b0 	.word	0x100000b0
1a001ab4:	100000b8 	.word	0x100000b8
1a001ab8:	100000a8 	.word	0x100000a8

1a001abc <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001abc:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001abe:	4b04      	ldr	r3, [pc, #16]	; (1a001ad0 <USB0_IRQHandler+0x14>)
1a001ac0:	681b      	ldr	r3, [r3, #0]
1a001ac2:	681b      	ldr	r3, [r3, #0]
1a001ac4:	68db      	ldr	r3, [r3, #12]
1a001ac6:	4a03      	ldr	r2, [pc, #12]	; (1a001ad4 <USB0_IRQHandler+0x18>)
1a001ac8:	6810      	ldr	r0, [r2, #0]
1a001aca:	4798      	blx	r3
}
1a001acc:	bd08      	pop	{r3, pc}
1a001ace:	bf00      	nop
1a001ad0:	100000c0 	.word	0x100000c0
1a001ad4:	100000bc 	.word	0x100000bc

1a001ad8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001ad8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001ada:	f7ff f929 	bl	1a000d30 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001ade:	4b1a      	ldr	r3, [pc, #104]	; (1a001b48 <boardInit+0x70>)
1a001ae0:	6818      	ldr	r0, [r3, #0]
1a001ae2:	f7ff fe15 	bl	1a001710 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001ae6:	2001      	movs	r0, #1
1a001ae8:	2100      	movs	r1, #0
1a001aea:	f7ff ff97 	bl	1a001a1c <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001aee:	2105      	movs	r1, #5
1a001af0:	2000      	movs	r0, #0
1a001af2:	f7ff fe37 	bl	1a001764 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001af6:	2100      	movs	r1, #0
1a001af8:	2024      	movs	r0, #36	; 0x24
1a001afa:	f7ff fe33 	bl	1a001764 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001afe:	2100      	movs	r1, #0
1a001b00:	2025      	movs	r0, #37	; 0x25
1a001b02:	f7ff fe2f 	bl	1a001764 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001b06:	2100      	movs	r1, #0
1a001b08:	2026      	movs	r0, #38	; 0x26
1a001b0a:	f7ff fe2b 	bl	1a001764 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001b0e:	2100      	movs	r1, #0
1a001b10:	2027      	movs	r0, #39	; 0x27
1a001b12:	f7ff fe27 	bl	1a001764 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001b16:	2101      	movs	r1, #1
1a001b18:	2028      	movs	r0, #40	; 0x28
1a001b1a:	f7ff fe23 	bl	1a001764 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001b1e:	2101      	movs	r1, #1
1a001b20:	2029      	movs	r0, #41	; 0x29
1a001b22:	f7ff fe1f 	bl	1a001764 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001b26:	2101      	movs	r1, #1
1a001b28:	202a      	movs	r0, #42	; 0x2a
1a001b2a:	f7ff fe1b 	bl	1a001764 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001b2e:	2101      	movs	r1, #1
1a001b30:	202b      	movs	r0, #43	; 0x2b
1a001b32:	f7ff fe17 	bl	1a001764 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001b36:	2101      	movs	r1, #1
1a001b38:	202c      	movs	r0, #44	; 0x2c
1a001b3a:	f7ff fe13 	bl	1a001764 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001b3e:	2101      	movs	r1, #1
1a001b40:	202d      	movs	r0, #45	; 0x2d
1a001b42:	f7ff fe0f 	bl	1a001764 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001b46:	bd08      	pop	{r3, pc}
1a001b48:	1000009c 	.word	0x1000009c

1a001b4c <__aeabi_uldivmod>:
1a001b4c:	b953      	cbnz	r3, 1a001b64 <__aeabi_uldivmod+0x18>
1a001b4e:	b94a      	cbnz	r2, 1a001b64 <__aeabi_uldivmod+0x18>
1a001b50:	2900      	cmp	r1, #0
1a001b52:	bf08      	it	eq
1a001b54:	2800      	cmpeq	r0, #0
1a001b56:	bf1c      	itt	ne
1a001b58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001b5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001b60:	f000 b94a 	b.w	1a001df8 <__aeabi_idiv0>
1a001b64:	f1ad 0c08 	sub.w	ip, sp, #8
1a001b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001b6c:	f000 f806 	bl	1a001b7c <__udivmoddi4>
1a001b70:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001b78:	b004      	add	sp, #16
1a001b7a:	4770      	bx	lr

1a001b7c <__udivmoddi4>:
1a001b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001b80:	468c      	mov	ip, r1
1a001b82:	468e      	mov	lr, r1
1a001b84:	9e08      	ldr	r6, [sp, #32]
1a001b86:	4615      	mov	r5, r2
1a001b88:	4604      	mov	r4, r0
1a001b8a:	4619      	mov	r1, r3
1a001b8c:	2b00      	cmp	r3, #0
1a001b8e:	f040 80af 	bne.w	1a001cf0 <__udivmoddi4+0x174>
1a001b92:	4572      	cmp	r2, lr
1a001b94:	fab2 f782 	clz	r7, r2
1a001b98:	d943      	bls.n	1a001c22 <__udivmoddi4+0xa6>
1a001b9a:	b14f      	cbz	r7, 1a001bb0 <__udivmoddi4+0x34>
1a001b9c:	f1c7 0320 	rsb	r3, r7, #32
1a001ba0:	fa0e fc07 	lsl.w	ip, lr, r7
1a001ba4:	fa20 f303 	lsr.w	r3, r0, r3
1a001ba8:	40bd      	lsls	r5, r7
1a001baa:	ea43 0c0c 	orr.w	ip, r3, ip
1a001bae:	40bc      	lsls	r4, r7
1a001bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001bb4:	b2a8      	uxth	r0, r5
1a001bb6:	fbbc f8fe 	udiv	r8, ip, lr
1a001bba:	0c23      	lsrs	r3, r4, #16
1a001bbc:	fb0e cc18 	mls	ip, lr, r8, ip
1a001bc0:	fb08 f900 	mul.w	r9, r8, r0
1a001bc4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a001bc8:	4599      	cmp	r9, r3
1a001bca:	d928      	bls.n	1a001c1e <__udivmoddi4+0xa2>
1a001bcc:	18eb      	adds	r3, r5, r3
1a001bce:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a001bd2:	d204      	bcs.n	1a001bde <__udivmoddi4+0x62>
1a001bd4:	4599      	cmp	r9, r3
1a001bd6:	d902      	bls.n	1a001bde <__udivmoddi4+0x62>
1a001bd8:	f1a8 0202 	sub.w	r2, r8, #2
1a001bdc:	442b      	add	r3, r5
1a001bde:	eba3 0309 	sub.w	r3, r3, r9
1a001be2:	fbb3 fcfe 	udiv	ip, r3, lr
1a001be6:	b2a4      	uxth	r4, r4
1a001be8:	fb0e 331c 	mls	r3, lr, ip, r3
1a001bec:	fb0c f000 	mul.w	r0, ip, r0
1a001bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001bf4:	42a0      	cmp	r0, r4
1a001bf6:	d979      	bls.n	1a001cec <__udivmoddi4+0x170>
1a001bf8:	192c      	adds	r4, r5, r4
1a001bfa:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
1a001bfe:	d204      	bcs.n	1a001c0a <__udivmoddi4+0x8e>
1a001c00:	42a0      	cmp	r0, r4
1a001c02:	d902      	bls.n	1a001c0a <__udivmoddi4+0x8e>
1a001c04:	f1ac 0302 	sub.w	r3, ip, #2
1a001c08:	442c      	add	r4, r5
1a001c0a:	1a24      	subs	r4, r4, r0
1a001c0c:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
1a001c10:	b11e      	cbz	r6, 1a001c1a <__udivmoddi4+0x9e>
1a001c12:	40fc      	lsrs	r4, r7
1a001c14:	2300      	movs	r3, #0
1a001c16:	6034      	str	r4, [r6, #0]
1a001c18:	6073      	str	r3, [r6, #4]
1a001c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001c1e:	4642      	mov	r2, r8
1a001c20:	e7dd      	b.n	1a001bde <__udivmoddi4+0x62>
1a001c22:	b902      	cbnz	r2, 1a001c26 <__udivmoddi4+0xaa>
1a001c24:	deff      	udf	#255	; 0xff
1a001c26:	b9e7      	cbnz	r7, 1a001c62 <__udivmoddi4+0xe6>
1a001c28:	ebae 0302 	sub.w	r3, lr, r2
1a001c2c:	2101      	movs	r1, #1
1a001c2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001c32:	b2a8      	uxth	r0, r5
1a001c34:	fbb3 fcfe 	udiv	ip, r3, lr
1a001c38:	0c22      	lsrs	r2, r4, #16
1a001c3a:	fb0e 331c 	mls	r3, lr, ip, r3
1a001c3e:	fb0c f800 	mul.w	r8, ip, r0
1a001c42:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
1a001c46:	4598      	cmp	r8, r3
1a001c48:	d94e      	bls.n	1a001ce8 <__udivmoddi4+0x16c>
1a001c4a:	18eb      	adds	r3, r5, r3
1a001c4c:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
1a001c50:	d204      	bcs.n	1a001c5c <__udivmoddi4+0xe0>
1a001c52:	4598      	cmp	r8, r3
1a001c54:	d902      	bls.n	1a001c5c <__udivmoddi4+0xe0>
1a001c56:	f1ac 0202 	sub.w	r2, ip, #2
1a001c5a:	442b      	add	r3, r5
1a001c5c:	eba3 0308 	sub.w	r3, r3, r8
1a001c60:	e7bf      	b.n	1a001be2 <__udivmoddi4+0x66>
1a001c62:	f1c7 0120 	rsb	r1, r7, #32
1a001c66:	fa2e f301 	lsr.w	r3, lr, r1
1a001c6a:	40bd      	lsls	r5, r7
1a001c6c:	fa0e fe07 	lsl.w	lr, lr, r7
1a001c70:	fa20 f101 	lsr.w	r1, r0, r1
1a001c74:	ea41 010e 	orr.w	r1, r1, lr
1a001c78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001c7c:	b2aa      	uxth	r2, r5
1a001c7e:	fbb3 fcfe 	udiv	ip, r3, lr
1a001c82:	fb0e 301c 	mls	r0, lr, ip, r3
1a001c86:	0c0b      	lsrs	r3, r1, #16
1a001c88:	fb0c f802 	mul.w	r8, ip, r2
1a001c8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a001c90:	4598      	cmp	r8, r3
1a001c92:	fa04 f407 	lsl.w	r4, r4, r7
1a001c96:	d923      	bls.n	1a001ce0 <__udivmoddi4+0x164>
1a001c98:	18eb      	adds	r3, r5, r3
1a001c9a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001c9e:	d204      	bcs.n	1a001caa <__udivmoddi4+0x12e>
1a001ca0:	4598      	cmp	r8, r3
1a001ca2:	d902      	bls.n	1a001caa <__udivmoddi4+0x12e>
1a001ca4:	f1ac 0002 	sub.w	r0, ip, #2
1a001ca8:	442b      	add	r3, r5
1a001caa:	eba3 0308 	sub.w	r3, r3, r8
1a001cae:	fbb3 fcfe 	udiv	ip, r3, lr
1a001cb2:	fb0c f802 	mul.w	r8, ip, r2
1a001cb6:	fb0e 321c 	mls	r2, lr, ip, r3
1a001cba:	b28b      	uxth	r3, r1
1a001cbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001cc0:	4598      	cmp	r8, r3
1a001cc2:	d90f      	bls.n	1a001ce4 <__udivmoddi4+0x168>
1a001cc4:	18eb      	adds	r3, r5, r3
1a001cc6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
1a001cca:	d204      	bcs.n	1a001cd6 <__udivmoddi4+0x15a>
1a001ccc:	4598      	cmp	r8, r3
1a001cce:	d902      	bls.n	1a001cd6 <__udivmoddi4+0x15a>
1a001cd0:	f1ac 0102 	sub.w	r1, ip, #2
1a001cd4:	442b      	add	r3, r5
1a001cd6:	eba3 0308 	sub.w	r3, r3, r8
1a001cda:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1a001cde:	e7a6      	b.n	1a001c2e <__udivmoddi4+0xb2>
1a001ce0:	4660      	mov	r0, ip
1a001ce2:	e7e2      	b.n	1a001caa <__udivmoddi4+0x12e>
1a001ce4:	4661      	mov	r1, ip
1a001ce6:	e7f6      	b.n	1a001cd6 <__udivmoddi4+0x15a>
1a001ce8:	4662      	mov	r2, ip
1a001cea:	e7b7      	b.n	1a001c5c <__udivmoddi4+0xe0>
1a001cec:	4663      	mov	r3, ip
1a001cee:	e78c      	b.n	1a001c0a <__udivmoddi4+0x8e>
1a001cf0:	4573      	cmp	r3, lr
1a001cf2:	d905      	bls.n	1a001d00 <__udivmoddi4+0x184>
1a001cf4:	b10e      	cbz	r6, 1a001cfa <__udivmoddi4+0x17e>
1a001cf6:	e9c6 0e00 	strd	r0, lr, [r6]
1a001cfa:	2100      	movs	r1, #0
1a001cfc:	4608      	mov	r0, r1
1a001cfe:	e78c      	b.n	1a001c1a <__udivmoddi4+0x9e>
1a001d00:	fab3 f783 	clz	r7, r3
1a001d04:	b987      	cbnz	r7, 1a001d28 <__udivmoddi4+0x1ac>
1a001d06:	4573      	cmp	r3, lr
1a001d08:	d301      	bcc.n	1a001d0e <__udivmoddi4+0x192>
1a001d0a:	4282      	cmp	r2, r0
1a001d0c:	d80a      	bhi.n	1a001d24 <__udivmoddi4+0x1a8>
1a001d0e:	1a84      	subs	r4, r0, r2
1a001d10:	eb6e 0303 	sbc.w	r3, lr, r3
1a001d14:	2001      	movs	r0, #1
1a001d16:	469c      	mov	ip, r3
1a001d18:	2e00      	cmp	r6, #0
1a001d1a:	d06a      	beq.n	1a001df2 <__udivmoddi4+0x276>
1a001d1c:	e9c6 4c00 	strd	r4, ip, [r6]
1a001d20:	2100      	movs	r1, #0
1a001d22:	e77a      	b.n	1a001c1a <__udivmoddi4+0x9e>
1a001d24:	4638      	mov	r0, r7
1a001d26:	e7f7      	b.n	1a001d18 <__udivmoddi4+0x19c>
1a001d28:	f1c7 0c20 	rsb	ip, r7, #32
1a001d2c:	40bb      	lsls	r3, r7
1a001d2e:	fa22 f40c 	lsr.w	r4, r2, ip
1a001d32:	431c      	orrs	r4, r3
1a001d34:	fa20 f10c 	lsr.w	r1, r0, ip
1a001d38:	fa2e f30c 	lsr.w	r3, lr, ip
1a001d3c:	fa0e fe07 	lsl.w	lr, lr, r7
1a001d40:	ea41 010e 	orr.w	r1, r1, lr
1a001d44:	ea4f 4914 	mov.w	r9, r4, lsr #16
1a001d48:	fa00 f507 	lsl.w	r5, r0, r7
1a001d4c:	fbb3 f8f9 	udiv	r8, r3, r9
1a001d50:	fa1f fe84 	uxth.w	lr, r4
1a001d54:	fb09 3018 	mls	r0, r9, r8, r3
1a001d58:	0c0b      	lsrs	r3, r1, #16
1a001d5a:	fb08 fa0e 	mul.w	sl, r8, lr
1a001d5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a001d62:	459a      	cmp	sl, r3
1a001d64:	fa02 f207 	lsl.w	r2, r2, r7
1a001d68:	d93f      	bls.n	1a001dea <__udivmoddi4+0x26e>
1a001d6a:	18e3      	adds	r3, r4, r3
1a001d6c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a001d70:	d204      	bcs.n	1a001d7c <__udivmoddi4+0x200>
1a001d72:	459a      	cmp	sl, r3
1a001d74:	d902      	bls.n	1a001d7c <__udivmoddi4+0x200>
1a001d76:	f1a8 0002 	sub.w	r0, r8, #2
1a001d7a:	4423      	add	r3, r4
1a001d7c:	eba3 030a 	sub.w	r3, r3, sl
1a001d80:	b289      	uxth	r1, r1
1a001d82:	fbb3 f8f9 	udiv	r8, r3, r9
1a001d86:	fb09 3318 	mls	r3, r9, r8, r3
1a001d8a:	fb08 fe0e 	mul.w	lr, r8, lr
1a001d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001d92:	458e      	cmp	lr, r1
1a001d94:	d92b      	bls.n	1a001dee <__udivmoddi4+0x272>
1a001d96:	1861      	adds	r1, r4, r1
1a001d98:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a001d9c:	d204      	bcs.n	1a001da8 <__udivmoddi4+0x22c>
1a001d9e:	458e      	cmp	lr, r1
1a001da0:	d902      	bls.n	1a001da8 <__udivmoddi4+0x22c>
1a001da2:	f1a8 0302 	sub.w	r3, r8, #2
1a001da6:	4421      	add	r1, r4
1a001da8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a001dac:	fba0 9802 	umull	r9, r8, r0, r2
1a001db0:	eba1 010e 	sub.w	r1, r1, lr
1a001db4:	4541      	cmp	r1, r8
1a001db6:	46ce      	mov	lr, r9
1a001db8:	4643      	mov	r3, r8
1a001dba:	d302      	bcc.n	1a001dc2 <__udivmoddi4+0x246>
1a001dbc:	d106      	bne.n	1a001dcc <__udivmoddi4+0x250>
1a001dbe:	454d      	cmp	r5, r9
1a001dc0:	d204      	bcs.n	1a001dcc <__udivmoddi4+0x250>
1a001dc2:	ebb9 0e02 	subs.w	lr, r9, r2
1a001dc6:	eb68 0304 	sbc.w	r3, r8, r4
1a001dca:	3801      	subs	r0, #1
1a001dcc:	b18e      	cbz	r6, 1a001df2 <__udivmoddi4+0x276>
1a001dce:	ebb5 020e 	subs.w	r2, r5, lr
1a001dd2:	eb61 0103 	sbc.w	r1, r1, r3
1a001dd6:	fa01 fc0c 	lsl.w	ip, r1, ip
1a001dda:	fa22 f307 	lsr.w	r3, r2, r7
1a001dde:	ea4c 0303 	orr.w	r3, ip, r3
1a001de2:	40f9      	lsrs	r1, r7
1a001de4:	e9c6 3100 	strd	r3, r1, [r6]
1a001de8:	e79a      	b.n	1a001d20 <__udivmoddi4+0x1a4>
1a001dea:	4640      	mov	r0, r8
1a001dec:	e7c6      	b.n	1a001d7c <__udivmoddi4+0x200>
1a001dee:	4643      	mov	r3, r8
1a001df0:	e7da      	b.n	1a001da8 <__udivmoddi4+0x22c>
1a001df2:	4631      	mov	r1, r6
1a001df4:	e711      	b.n	1a001c1a <__udivmoddi4+0x9e>
	...

1a001df8 <__aeabi_idiv0>:
1a001df8:	4770      	bx	lr
1a001dfa:	bf00      	nop

1a001dfc <__libc_init_array>:
1a001dfc:	b570      	push	{r4, r5, r6, lr}
1a001dfe:	4d0d      	ldr	r5, [pc, #52]	; (1a001e34 <__libc_init_array+0x38>)
1a001e00:	4c0d      	ldr	r4, [pc, #52]	; (1a001e38 <__libc_init_array+0x3c>)
1a001e02:	1b64      	subs	r4, r4, r5
1a001e04:	10a4      	asrs	r4, r4, #2
1a001e06:	2600      	movs	r6, #0
1a001e08:	42a6      	cmp	r6, r4
1a001e0a:	d109      	bne.n	1a001e20 <__libc_init_array+0x24>
1a001e0c:	4d0b      	ldr	r5, [pc, #44]	; (1a001e3c <__libc_init_array+0x40>)
1a001e0e:	4c0c      	ldr	r4, [pc, #48]	; (1a001e40 <__libc_init_array+0x44>)
1a001e10:	f7fe fdfb 	bl	1a000a0a <_init>
1a001e14:	1b64      	subs	r4, r4, r5
1a001e16:	10a4      	asrs	r4, r4, #2
1a001e18:	2600      	movs	r6, #0
1a001e1a:	42a6      	cmp	r6, r4
1a001e1c:	d105      	bne.n	1a001e2a <__libc_init_array+0x2e>
1a001e1e:	bd70      	pop	{r4, r5, r6, pc}
1a001e20:	f855 3b04 	ldr.w	r3, [r5], #4
1a001e24:	4798      	blx	r3
1a001e26:	3601      	adds	r6, #1
1a001e28:	e7ee      	b.n	1a001e08 <__libc_init_array+0xc>
1a001e2a:	f855 3b04 	ldr.w	r3, [r5], #4
1a001e2e:	4798      	blx	r3
1a001e30:	3601      	adds	r6, #1
1a001e32:	e7f2      	b.n	1a001e1a <__libc_init_array+0x1e>
1a001e34:	1a000300 	.word	0x1a000300
1a001e38:	1a000300 	.word	0x1a000300
1a001e3c:	1a000300 	.word	0x1a000300
1a001e40:	1a000304 	.word	0x1a000304

1a001e44 <memset>:
1a001e44:	4402      	add	r2, r0
1a001e46:	4603      	mov	r3, r0
1a001e48:	4293      	cmp	r3, r2
1a001e4a:	d100      	bne.n	1a001e4e <memset+0xa>
1a001e4c:	4770      	bx	lr
1a001e4e:	f803 1b01 	strb.w	r1, [r3], #1
1a001e52:	e7f9      	b.n	1a001e48 <memset+0x4>

1a001e54 <ExtRateIn>:
1a001e54:	0000 0000                                   ....

1a001e58 <GpioButtons>:
1a001e58:	0400 0800 0900 0901                         ........

1a001e60 <GpioLeds>:
1a001e60:	0005 0105 0205 0e00 0b01 0c01               ............

1a001e6c <GpioPorts>:
1a001e6c:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a001e7c:	0802 0000                                   ....

1a001e80 <OscRateIn>:
1a001e80:	1b00 00b7                                   ....

1a001e84 <InitClkStates>:
1a001e84:	0f01 0101                                   ....

1a001e88 <pinmuxing>:
1a001e88:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a001e98:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a001ea8:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a001eb8:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a001ec8:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a001ed8:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a001ee8:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a001ef8:	0206 0057 0f03 0f0f 00ff 0000               ..W.........

1a001f04 <periph_to_base>:
1a001f04:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a001f14:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a001f24:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a001f34:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a001f44:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a001f54:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a001f64:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a001f70 <InitClkStates>:
1a001f70:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a001f80:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a001f90:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a001fa0:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a001fb0:	111a 0001 111b 0001                         ........

1a001fb8 <UART_BClock>:
1a001fb8:	01c2 01a2 0182 0162                         ......b.

1a001fc0 <UART_PClock>:
1a001fc0:	0081 0082 00a1 00a2                         ........

1a001fc8 <gpioPinsInit>:
1a001fc8:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a001fd8:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a001fe8:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a001ff8:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a002008:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a002018:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a002028:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a002038:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a002048:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a002058:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a002068:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a002078:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a002088:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a002098:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a0020a8:	020b 000c 0c01 0000                         ........
